/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.objectstorage.file.download.demo;

use com.ibm.streamsx.objectstorage::*;
use spl.file::*;

public composite FileWriteSample {

	param
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3.us.cloud-object-storage.appdomain.cloud");

		expression<rstring> $localFileDir: getSubmissionTimeValue("localFileDir", "/tmp/localResources");
		expression<int32>   $blockSize: (int32)getSubmissionTimeValue("blockSize", "4096"); // value 0 loads object as a single tuple

	graph
        
		() as DataGen = ObjectStorageDataGen() {
			param
				objectStorageURI: $objectStorageURI;								
				endpoint: $endpoint;
		}
		
		() as ObjSink = ReadObjectsAndWriteToFile() {
			param
				objectStorageURI: $objectStorageURI;								
				endpoint: $endpoint;
				localFileDir: $localFileDir;
				blockSize: $blockSize;
		}
}

composite ReadObjectsAndWriteToFile {

	param
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint;
		expression<rstring> $localFileDir;
		expression<int32>   $blockSize;

	graph
	
		stream<blob content> S3Data = ObjectStorageScanner() {
			param
				objectStorageURI: $objectStorageURI;								
				endpoint: $endpoint;
				blockSize: $blockSize;
		}

		() as Sink = FileSink(S3Data) {
			logic state : int32 status = ensureDirs($localFileDir + "/temp");
			param
				file: $localFileDir + "/temp/" + "{id}";
				format: block;
				moveFileToDirectory: $localFileDir;
				closeMode: punct;
			config
				placement: partitionColocation("SinkData");
		}
}


composite ObjectStorageScanner (output ObjectContent) {

    param
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint;
		expression<rstring> $pattern: ".*";
		expression<rstring> $directory: "/files";
		expression<int32>   $blockSize;
	

	graph
		stream<rstring objectname> S3Name = ObjectStorageScan() {
			param
				objectStorageURI: $objectStorageURI;								
				endpoint: $endpoint;
				pattern: $pattern;
				directory: $directory;
			config
				placement: partitionExlocation("PE_SEPARATION"), partitionColocation("SinkData");				
  		}


		stream<blob content> ObjectContent = ObjectStorageSource(S3Name) {
			param
				objectStorageURI: $objectStorageURI;								
				endpoint: $endpoint;
				blockSize: $blockSize;
			config
				placement: partitionColocation("SinkData");				
  		}

	
}

composite ObjectStorageDataGen {

	param
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint;
		expression<rstring> $objectName: "%OBJECTNUM.txt";
		expression<rstring> $directory: "/files/";

	graph

		stream<rstring i> SampleData = Beacon()  {
			param 
				iterations: 5000000;
			output SampleData: 
				i = (rstring)IterationCount();
			config
				placement: partitionExlocation("PE_SEPARATION"), partitionColocation("PrepareData");				
		}
        
        
		() as osSink = ObjectStorageSink(SampleData) {
			param
				objectStorageURI: $objectStorageURI;								
				objectName : $directory + $objectName;
				endpoint : $endpoint;
				bytesPerObject: 5000000l;
			config
				placement: partitionColocation("PrepareData");				
		}
    
}


stateful int32 ensureDirs(rstring dirpath) {
    appTrc(Trace.warn, "\nCalled: ensureDirs, with " + dirpath);

    list<rstring> steps = tokenize(dirpath, "/", false);
    ensureDirs(steps, 1);

    return 1;
}

stateful void ensureDirs(list<rstring> steps, int32 depth) {
    if (depth > size(steps)) {
        return; // end of recursion
    }
    mutable int32 err = 0;
    uint32 mode = 511u; // octal 0777, all rights
    mutable rstring dir = "/";
    for (int32 i in range(0, depth)) {
        dir += steps[i] + "/";
    }
    mkdir(dir, mode, err);
    appTrc(Trace.info, "\nmkdir " + dir + ", Status: " + (rstring) err);

    ensureDirs(steps, depth + 1);
}
