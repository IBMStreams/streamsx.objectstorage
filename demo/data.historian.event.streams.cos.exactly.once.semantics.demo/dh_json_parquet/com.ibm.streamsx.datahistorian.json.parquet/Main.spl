/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.datahistorian.json.parquet;

use com.ibm.streamsx.messagehub::*;
use com.ibm.streamsx.objectstorage::*;
use com.ibm.streamsx.json::*;

    
type
 	DataHistorianData_t = 
 	    optional<rstring> key, 	
 	    optional<rstring> tz,
 	    optional<rstring> id,
 	    optional<int32>   channel,
 	    optional<int64>   ivalue,
 	    optional<float64> fvalue,
	    optional<rstring> bstr;

public composite Main {

param
    expression <int32> $nConsumers: (int32) getSubmissionTimeValue ("mh.consumer.group.size", "1");
    
    expression <rstring> $topic: getSubmissionTimeValue ("mh.topic");
    expression <rstring> $groupId: getSubmissionTimeValue ("mh.consumer.group.id", "consumerGroup_basic01");
    
    expression <int32> $nWriters: (int32) getSubmissionTimeValue ("cos.number.writers", "1");
    expression <rstring> $objectStorageUri: getSubmissionTimeValue ("cos.uri"); // s3a://<bucketname>/
    expression<rstring> $endpoint: getSubmissionTimeValue("cos.endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
    
graph

    () as JCP = JobControlPlane() {}
    
    @parallel (width = $nConsumers)
    @threading(model=dedicated)
    stream<DataHistorianData_t> DHEvent = IngestConsumer() {
        param 
            topic: $topic;
            groupId: $groupId;
        config placement: partitionColocation(byChannel());
    }
    
    @parallel (width = 1)
    stream<I> FilteredDHEvent = Filter(DHEvent as I) {
        param
            filter: true;
        config placement: partitionIsolation;
    }

    @parallel (width = $nWriters)
    () as CosSink = ObjectStorageSink (FilteredDHEvent as I) {
         param
             vmArg: "-Xmx 14336m";
             objectStorageURI: $objectStorageUri;
             endpoint: $endpoint;
             objectName: "DataHistorian/"+(rstring)(getChannel())+"_%OBJECTNUM.parquet";
             storageFormat: "parquet";
             parquetCompression: "SNAPPY";
             parquetEnableDict: true;
             appConfigName: "cos"; // this is the default value; credentials in property cos.creds
        config placement: partitionIsolation;
    }
}


composite IngestConsumer (output DHEvent) {

param
    expression <rstring> $topic: getSubmissionTimeValue ("mh.topic");
    expression <rstring> $groupId: getSubmissionTimeValue ("mh.consumer.group.id", "consumerGroup_basic01");
    expression<rstring> $vmArgs: "-Xmx 2048m";

graph

    // default timeouts for drain and reset are 180 seconds
    @consistent (trigger = periodic, period = 60.0, maxConsecutiveResetAttempts = 20, drainTimeout = 180.0, resetTimeout = 180.0)
    stream <rstring message, rstring key> InMessages = MessageHubConsumer() {
        param
            vmArg: $vmArgs;
            topic: $topic;            
            groupId: $groupId;
            startPosition: Beginning; // for demo use case only, to be able to repeat test runs with same data
            appConfigName: "messagehub"; // this is the default app config name; credentials in property messagehub.creds
            // propertiesFile: getThisToolkitDir() + "/etc/consumer.properties"; // OPTIONAL
    }
    
    @parallel (width = 2)
    stream<DataHistorianData_t> DHEvent = JSONToTuple(InMessages as I) {
        param
            inputAttribute: I.message;
            vmArg: $vmArgs;
    }
	  
}
