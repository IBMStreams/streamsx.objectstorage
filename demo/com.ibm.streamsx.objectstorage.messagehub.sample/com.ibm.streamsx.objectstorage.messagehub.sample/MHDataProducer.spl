/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.objectstorage.messagehub.sample;


type DataHistorianData_t = 
    	rstring id,
    	rstring tz,
    	rstring dateutc,
    	float64 latitude,
    	float64 longitude,
    	float64 temperature,
    	float64 baromin,
    	float64 humidity,
    	float64 rainin,
    	rstring time_stamp;


stateful rstring createTimestamp() {
	timestamp ts = getTimestamp();	
	// "2018-02-20 03:42:51"
	return (rstring)year(ts) + "-" + (rstring)month(ts) + "-" + (rstring)day(ts) + " " + (rstring)gmhour(ts) + ":" + (rstring)gmminute(ts) + ":" + (rstring)gmsecond(ts);
}


public list<rstring> getTZList() {
	return ["GMT","UTC","ECT","EET","ART","EAT","MET","NET","PLT","IST","BST","VST","CTT","JST","ACT","AET","SST","NST","MIT","HST","AST","PST","PNT","MST","CST","EST","IET","PRT","CNT","AGT","BET","CAT"];
}

public composite MHDataProducer {
	graph
		stream<DataHistorianData_t> GenData = Beacon()  {
			param iterations: 1000000;
		}

		(stream<I> MHData) as MeasureWrite = Custom(GenData as I) {
			logic state: {
				mutable int64 numTuples = 0l;
			}
			onTuple I: {
				numTuples++;
				I.id = "I53700CO" + (rstring)(random()*100.0);
				I.tz = getTZList()[(int32)(random() * (float64)size(getTZList()))];
				I.dateutc = createTimestamp();
				I.latitude =  random() * 100.0;
				I.longitude =  random() * 100.0;
				I.temperature =  random() * 50.0;
				I.baromin =  random() * 40.0;
				I.humidity =  random() * 70.0;
				I.rainin =  random() * 20.0;
				I.time_stamp =  createTimestamp();
				submit(I, MHData);
			}
		}
		
		stream<rstring message> MHMessage = com.ibm.streamsx.json::TupleToJSON(MHData) {}
		
		
		() as MHProducer = com.ibm.streamsx.messagehub::MessageHubProducer(MHMessage) {
			param
				messageHubCredentialsFile : "etc/messagehub.conf";
				topic : "DataHistorianOSTest";
		}
}

