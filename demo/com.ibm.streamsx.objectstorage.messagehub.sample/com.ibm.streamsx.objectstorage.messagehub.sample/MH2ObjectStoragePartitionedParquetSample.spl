/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.objectstorage.messagehub.sample;

use com.ibm.streamsx.json::*;
use com.ibm.streamsx.objectstorage::*;

    
public composite MH2ObjectStoragePartitionedParquetSample {
	
	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key", "");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance", "");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");

		expression<rstring> $objectName: getSubmissionTimeValue("objectName", "/prefix/%PARTITIONS/suffix/dataHistorian_%TIME.parquet"); 
		expression<float64> $timePerObject: (float64)getSubmissionTimeValue("timePerObject", "30.0");

	graph
     
		stream<rstring jsonString> MessageHubData = com.ibm.streamsx.messagehub::MessageHubConsumer() {
			param
				messageHubCredentialsFile : "etc/messagehub.conf";
				propertiesFile:"etc/consumer.properties";
				outputMessageAttributeName : "jsonString";
				topic : "DataHistorianOSTest";
		}

		stream<DataHistorianData_t> DHEvent = Custom(MessageHubData) {
			logic
			onTuple MessageHubData : {
				mutable JsonParseStatus.status parseStatus = JsonParseStatus.PARSED;
				mutable uint32 offset = 0u;
				parseJSON(MessageHubData.jsonString, parseStatus, offset, JsonIndex._1);
				if (parseStatus == JsonParseStatus.PARSED) {
					mutable DataHistorianData_t outTuple = {};
					mutable JsonStatus.status status = JsonStatus.FOUND;

					outTuple.id = queryJSON("/id", "", status, JsonIndex._1);                       
					outTuple.tz = queryJSON("/tz", "", status, JsonIndex._1);
					outTuple.dateutc = queryJSON("/dateutc", "", status, JsonIndex._1);
					outTuple.latitude = queryJSON("/latitude", 0.0, status, JsonIndex._1);
					outTuple.longitude = queryJSON("/longitude", 0.0, status, JsonIndex._1);
					outTuple.temperature = queryJSON("/temperature", 0.0, status, JsonIndex._1);
					outTuple.baromin = queryJSON("/baromin", 0.0, status, JsonIndex._1);
					outTuple.humidity = queryJSON("/humidity", 0.0, status, JsonIndex._1);
					outTuple.rainin = queryJSON("/rainin", 0.0, status, JsonIndex._1);
					outTuple.time_stamp = queryJSON("/time_stamp", "", status, JsonIndex._1);
                        
					submit(outTuple, DHEvent);
				}
			}
		}
        
		stream<I> FilteredDHEvent = Filter(DHEvent as I) {
			param
				filter: (temperature > 15.0) || (humidity > 35.0 && humidity < 95.0);
		}
     
		() as OSink = ObjectStorageSink(FilteredDHEvent) {
            param
				objectStorageURI: $objectStorageURI;
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				endpoint : $endpoint;
				objectName : "%TIME/_myFile.txt";
				timePerObject : $timePerObject;
				storageFormat : "parquet";
				parquetCompression : "UNCOMPRESSED";
				parquetEnableDict : true;
				partitionValueAttributes : "tz";
			config
				placement: partitionIsolation;
		}
		
}
