//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.swift.test;

use com.ibm.streamsx.objectstorage::SwiftSource;
use com.ibm.streamsx.objectstorage::SwiftSink;

/**
 * This sample application tests the time to write files to Object Storage
 * and the time to read files from Object Storage.
 * The test data is created in memory of an operator before starting the time measurement.
 * One tuple send to the SwiftSink represents the file to be created on Object Storage.
 * When all files have been created, then the read performance measurement starts and
 * all files are read from Object Storage and tuples are discarded.
 */
@threading(model=manual)
composite Main {

	param
		expression<rstring> $objectStorageUserID:    getSubmissionTimeValue("ObjectStorage-UserId");
		expression<rstring> $objectStoragePassword:  getSubmissionTimeValue("ObjectStorage-Password");
		expression<rstring> $objectStorageProjectID: getSubmissionTimeValue("ObjectStorage-ProjectId");
		expression<rstring> $objectStorageContainer: getSubmissionTimeValue("ObjectStorage-Container");
		expression<rstring> $objectStorageAccessPoint: "lon.objectstorage.open.softlayer.com";

		expression<int32> $numFiles: (int32)getSubmissionTimeValue("numFiles", "100000");
		expression<int32> $numBytes: (int32)getSubmissionTimeValue("numBytesPerFile", "4000000");

	graph
		// *********************************************************************
		// Data Generator
		// *********************************************************************

		/*
		 * The Custom stores the received numbers.
		 */
		stream<rstring filename, rstring data> DataString as O = Custom() {
			logic
			state: {
				mutable map<int32, rstring> dataMap;
				mutable int32 numFiles_ = $numFiles;
				mutable rstring testData = "";
				mutable int32 numDataSets = 0l;
			}
			onProcess: {
				for (int32 fileId in range(numFiles_)) {
					for (int32 dataSetCounter in range($numBytes)) {
						testData += "x";
						numDataSets = dataSetCounter;
					}
					dataMap[fileId] = testData;
					testData = "";
				}
				// Start the WRITE FILE measurement
				submit(Sys.WindowMarker, O); // time measurement start
				for (int32 fileIndex in dataMap) {
					submit ({filename=(rstring) fileIndex, data=dataMap[fileIndex]}, O);
				}
				submit(Sys.WindowMarker, O); // time measurement end
			}
			config placement: partitionColocation("PERFTEST");
		}
		
		stream<rstring filename> ObjStSink = SwiftSink(DataString) { 
			param
				objectStorageUserID : $objectStorageUserID;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectStorageContainer : $objectStorageContainer;
				objectStorageAccessPoint: $objectStorageAccessPoint;
			config placement: partitionColocation("PERFTEST");                 
		}
		
		
		(stream<rstring filename> FilesToRead as O) as MeasureWrite = Custom(ObjStSink as I) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numFiles = 0;
				mutable list<rstring> fileNames;
			}
			onTuple I: {
				insertM(fileNames, I.filename, numFiles);
				numFiles++;
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					if (!isStarted) {
						isStarted = true;
						startTimestamp = getTimestamp();
					}
					else {
						mutable timestamp duration = diffAsSecs(getTimestamp(),startTimestamp);
						printStringLn ("[WRITE] duration="+(rstring)duration);
						printStringLn ("[WRITE] numFiles="+(rstring)numFiles);
						printStringLn ("[WRITE] fileSize="+(rstring)$numBytes);
						
						// Start the READ FILE measurement
						submit(Sys.WindowMarker, O); // time measurement start
						for (rstring name in fileNames) {
							submit ({filename=name}, O);
						}
						submit(Sys.WindowMarker, O); // time measurement end						
					}
				}
			}
			config placement: partitionColocation("PERFTEST");			
		}		

		stream<rstring data> ObjStSource = SwiftSource(FilesToRead) { 
			param
				objectStorageUserID : $objectStorageUserID;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectStorageContainer : $objectStorageContainer;
				objectStorageAccessPoint: $objectStorageAccessPoint;
			config placement: partitionColocation("PERFTEST");                 
		}
		
		() as MeasureRead = Custom(ObjStSource as I) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numFiles = 0;
			}
			onTuple I: {
				numFiles++;
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					if (!isStarted) {
						isStarted = true;
						startTimestamp = getTimestamp();
					}
					else {
						mutable timestamp duration = diffAsSecs(getTimestamp(),startTimestamp);
						printStringLn ("[READ] duration="+(rstring)duration);
						printStringLn ("[READ] numFiles="+(rstring)numFiles);
						printStringLn ("[READ] fileSize="+(rstring)$numBytes);
					}
				}
			}
			config placement: partitionColocation("PERFTEST");			
		}		
}
