//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.swift.test;

use com.ibm.streamsx.objectstorage.swift::SwiftSource;
use com.ibm.streamsx.objectstorage.swift::SwiftSink;
use com.ibm.streamsx.objectstorage.swift::*;

/**
 * This sample application tests the time to write files to Object Storage
 * and the time to read files from Object Storage.
 * The test data is created in memory of an operator before starting the time measurement.
 * One tuple send to the SwiftSink represents the file to be created on Object Storage.
 * When all files have been created, then the read performance measurement starts and
 * all files are read from Object Storage and tuples are discarded.
 */
@threading(model=manual)
composite Main {

	param			
		expression<rstring> $objectStorageUserID:    getSubmissionTimeValue("ObjectStorage-UserId");
		expression<rstring> $objectStoragePassword:  getSubmissionTimeValue("ObjectStorage-Password");
		expression<rstring> $objectStorageProjectID: getSubmissionTimeValue("ObjectStorage-ProjectId");
		expression<rstring> $objectStorageContainer: getSubmissionTimeValue("ObjectStorage-Container");
		expression<rstring> $objectStorageAccessPoint: "dal.objectstorage.open.softlayer.com";

		expression<int32> $numChannels: (int32) getSubmissionTimeValue("numChannels", "1");

	graph

		/*
		 * Test config files
		 * Specifies number of files and file size per test sequence
		 */	
		stream<int32 numFiles, int32 numBytes> CfgStream = FileSource() {
			param
				file : getThisToolkitDir()+"/etc/test_config.csv";
				parsing : permissive;
		}

		@parallel(width = $numChannels, broadcast=[CfgStream])
		() as Tester = Test(CfgStream) {
			param
				objectStorageUserID : $objectStorageUserID;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectStorageContainer : $objectStorageContainer+(rstring)getChannel();
				objectStorageAccessPoint: $objectStorageAccessPoint;
		}		

	config restartable: false;
}

composite Test (input CfgStream)
{
	param
		expression<rstring> $objectStorageUserID;
		expression<rstring> $objectStoragePassword;
		expression<rstring> $objectStorageProjectID;
		expression<rstring> $objectStorageContainer;
		expression<rstring> $objectStorageAccessPoint;

	graph
		/*
		 * Data Generator
		 */
		stream<rstring objectName, rstring data> DataString as O = Custom(CfgStream as I) {
			logic
			state: {
				mutable O otuple = {};
				mutable int32 numDataSet = 0;
			}
			onTuple I: {
				printStringLn ("["+(rstring)getChannel()+"]"+"----------------------------------------");
				printStringLn ("["+(rstring)getChannel()+"]"+"Setup ...");
				mutable rstring authKey = authenticate($objectStorageUserID, $objectStoragePassword, $objectStorageProjectID, $objectStorageAccessPoint);
				createContainer($objectStorageContainer, $objectStorageProjectID, $objectStorageAccessPoint, authKey);			

				printStringLn ("["+(rstring)getChannel()+"]"+"Data generation [files="+(rstring)I.numFiles + "][bytes=" +(rstring)I.numBytes+ "]");
				for (int32 dataSetCounter in range(I.numBytes)) {
					otuple.data += "x";
					numDataSet = dataSetCounter;
				}
				printStringLn ("["+(rstring)getChannel()+"]"+"Start the WRITE measurement");
				// Start the WRITE FILE measurement
				submit(Sys.WindowMarker, O); // time measurement start
				for (int32 fileId in range(I.numFiles)) {
					otuple.objectName=(rstring) fileId;
					submit (otuple, O);
				}
				submit(Sys.WindowMarker, O); // time measurement end
				otuple.data = "";
				numDataSet = 0;
			}
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel()), partitionExlocation("TESTAPP");
		}
		
		stream<rstring objectName> ObjStSink = SwiftSink(DataString) { 
			param
				objectStorageUserID : $objectStorageUserID;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectStorageContainer : $objectStorageContainer;
				objectStorageAccessPoint: $objectStorageAccessPoint;
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel());
		}

		(stream<rstring objectName> FilesToRead as O) as MeasureWrite = Custom(ObjStSink as I) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numFiles = 0;
				mutable list<rstring> fileNames;
			}
			onTuple I: {
				insertM(fileNames, I.objectName, numFiles);
				numFiles++;
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					if (!isStarted) {
						isStarted = true;
						startTimestamp = getTimestamp();
					}
					else {
						mutable timestamp duration = diffAsSecs(getTimestamp(),startTimestamp);
						printStringLn ("["+(rstring)getChannel()+"]"+"[WRITE] duration="+(rstring)duration);
						printStringLn ("["+(rstring)getChannel()+"]"+"[WRITE] numFiles="+(rstring)numFiles);
						
						// Start the READ FILE measurement
						submit(Sys.WindowMarker, O); // time measurement start
						for (rstring name in fileNames) {
							submit ({objectName=name}, O);
						}
						submit(Sys.WindowMarker, O); // time measurement end
						// reset
						clearM(fileNames);
						numFiles = 0;
						isStarted = false;				
					}
				}
			}
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel());
		}		

		stream<rstring objectName, rstring data> ObjStSource = SwiftSource(FilesToRead) { 
			param
				objectStorageUserID : $objectStorageUserID;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectStorageContainer : $objectStorageContainer;
				objectStorageAccessPoint: $objectStorageAccessPoint;
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel());
		}
		
		() as MeasureRead = Custom(ObjStSource as I) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numFiles = 0;
				mutable list<rstring> fileNames;
			}
			onTuple I: {
				insertM(fileNames, I.objectName, numFiles);
				numFiles++;
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					if (!isStarted) {
						isStarted = true;
						startTimestamp = getTimestamp();
					}
					else {
						mutable timestamp duration = diffAsSecs(getTimestamp(),startTimestamp);
						printStringLn ("["+(rstring)getChannel()+"]"+"[READ] duration="+(rstring)duration);
						printStringLn ("["+(rstring)getChannel()+"]"+"[READ] numFiles="+(rstring)numFiles);
						
						// clean-up - delete objects
						mutable rstring authKey = authenticate($objectStorageUserID, $objectStoragePassword, $objectStorageProjectID, $objectStorageAccessPoint);
						for (rstring name in fileNames) {
							deleteObject(name, $objectStorageContainer, $objectStorageProjectID, $objectStorageAccessPoint, authKey);
						}
						// reset
						clearM(fileNames);
						numFiles = 0;
						isStarted = false;
					}
				}
			}
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel());
		}
		
	config restartable: false;
}
