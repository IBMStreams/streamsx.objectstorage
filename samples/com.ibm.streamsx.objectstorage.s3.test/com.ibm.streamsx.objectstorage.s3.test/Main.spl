//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.s3.test;

use com.ibm.streamsx.objectstorage.s3::S3Sink;
use com.ibm.streamsx.objectstorage.s3::S3Source;
use com.ibm.streamsx.objectstorage.s3::*;

/**
 * This sample application tests the time to write files to Object Storage
 * and the time to read files from Object Storage.
 * The test data is created in memory of an operator before starting the time measurement.
 * One tuple send to the S3Sink represents the file to be created on Object Storage.
 * When all files have been created, then the read performance measurement starts and
 * all files are read from Object Storage and tuples are discarded.
 */
@threading(model=manual)
composite Main {

	param
		expression<rstring> $accessKeyID : getSubmissionTimeValue("AccessKeyID");
		expression<rstring> $secretAccessKey : getSubmissionTimeValue("SecretAccessKey");
		expression<rstring> $endpoint : getSubmissionTimeValue("Endpoint");
		expression<rstring> $bucket : getSubmissionTimeValue("Bucket");

	graph
	
		/*
		 * Test config files
		 * Specifies number of files and file size per test sequence
		 */	
		stream<int32 numFiles, int32 numBytes> CfgStream = FileSource() {
			param
				file : getThisToolkitDir()+"/etc/test_config.csv";
				parsing : permissive;
		}	

		/*
		 * Data Generator
		 */
		(
		stream<rstring objectName, rstring data> DataString as O;
		stream<rstring command> CmdStream1
		) = Custom(CfgStream as I) {
			logic
			state: {
				mutable map<int32, rstring> dataMap;
				mutable rstring testData = "";
				mutable int32 numDataSets = 0l;
			}
			onTuple I: {
				printStringLn ("----------------------------------------");
				printStringLn ("Setup ...");
				submit ({command="CREATE_BUCKET"}, CmdStream1);
				submit ({command="DELETE_ALL_OBJECTS"}, CmdStream1);
				printStringLn ("Data generation [files="+(rstring)I.numFiles + "][bytes=" +(rstring)I.numBytes+ "]");
				for (int32 fileId in range(I.numFiles)) {
					for (int32 dataSetCounter in range(I.numBytes)) {
						testData += "x";
						numDataSets = dataSetCounter;
					}
					dataMap[fileId] = testData;
					testData = "";
				}
				printStringLn ("Start the WRITE measurement");
				// Start the WRITE FILE measurement
				submit(Sys.WindowMarker, O); // time measurement start
				for (int32 fileIndex in dataMap) {
					submit ({objectName=(rstring) fileIndex, data=dataMap[fileIndex]}, O);
				}
				submit(Sys.WindowMarker, O); // time measurement end
				// reset
				clearM(dataMap);
				numDataSets = 0;
				testData = "";
			}
			config placement: partitionColocation("PERFTEST");
		}
		
		() as Util = S3Util(CmdStream1, CmdStream2) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				vmArg : "-Xmx4096m";
			config placement: partitionColocation("PERFTEST");                 
		}		
		
		stream<rstring objectName> ObjStSink = S3Sink(DataString) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				vmArg : "-Xmx4096m";
			config placement: partitionColocation("PERFTEST");                 
		}

		(stream<rstring objectName> FilesToRead as O) as MeasureWrite = Custom(ObjStSink as I) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numFiles = 0;
				mutable list<rstring> fileNames;
			}
			onTuple I: {
				insertM(fileNames, I.objectName, numFiles);
				numFiles++;
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					if (!isStarted) {
						isStarted = true;
						startTimestamp = getTimestamp();
					}
					else {
						mutable timestamp duration = diffAsSecs(getTimestamp(),startTimestamp);
						printStringLn ("[WRITE] duration="+(rstring)duration);
						printStringLn ("[WRITE] numFiles="+(rstring)numFiles);

						printStringLn ("Start the READ measurement");
						// Start the READ FILE measurement
						submit(Sys.WindowMarker, O); // time measurement start
						for (rstring name in fileNames) {
							submit ({objectName=name}, O);
						}
						submit(Sys.WindowMarker, O); // time measurement end						

						// reset
						clearM(fileNames);
						numFiles = 0;
						isStarted = false;
					}
				}
			}
			config placement: partitionColocation("PERFTEST");			
		}		

		stream<rstring objectName, rstring data> ObjStSource = S3Source(FilesToRead) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				vmArg : "-Xmx4096m";
			config placement: partitionColocation("PERFTEST");                 
		}
		
		(stream<rstring command> CmdStream2) as MeasureRead = Custom(ObjStSource as I) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numFiles = 0;
				mutable list<rstring> fileNames;
			}
			onTuple I: {
				insertM(fileNames, I.objectName, numFiles);
				numFiles++;
//				printStringLn ("READ: "+I.data);
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					if (!isStarted) {
						isStarted = true;
						startTimestamp = getTimestamp();
					}
					else {
						mutable timestamp duration = diffAsSecs(getTimestamp(),startTimestamp);
						printStringLn ("[READ] duration="+(rstring)duration);
						printStringLn ("[READ] numFiles="+(rstring)numFiles);
						
						// clean-up - delete objects
//						for (rstring name in fileNames) {
//							deleteObject(name, $bucket, $accessKeyID, $secretAccessKey, $endpoint);
//						}

						// reset
						clearM(fileNames);
						numFiles = 0;
						isStarted = false;
					}
				}
			}
			config placement: partitionColocation("PERFTEST");			
		}	
	
	config restartable: false;
}
