namespace com.ibm.streamsx.objectstorage.s3.sample;

use com.ibm.streamsx.objectstorage.s3::*;

public composite BucketScanSample {

	param
		expression<rstring> $accessKeyID : getSubmissionTimeValue("ObjectStorage-AccessKeyID");
		expression<rstring> $secretAccessKey : getSubmissionTimeValue("ObjectStorage-SecretAccessKey");
		expression<rstring> $endpoint : getSubmissionTimeValue("ObjectStorage-Endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<rstring> $bucket : getSubmissionTimeValue("ObjectStorage-Bucket", "streams-sample");
		expression<boolean> $cleanup : (boolean)getSubmissionTimeValue("cleanup", "false");
		expression<rstring> $scanDirectoryName: getSubmissionTimeValue("scanDirectoryName", "/");
		expression<rstring> $outNamePattern: getSubmissionTimeValue("outNamePattern", ".*");
		expression<rstring> $outObjectName: getSubmissionTimeValue("outObjectName", "/scanTestData/output_%OBJECTNUM.txt");

	graph

		stream<rstring line> Data = FileSource() {
		            param
		                file : getThisToolkitDir()+"/etc/input.txt";
		                format: line;
		                initDelay: 5.0;
		        }
		
		
		() as osSink = S3ObjectStorageSink(Data) {
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				protocol: s3d;
				objectName: $outObjectName;
				bytesPerObject: 20l;
  		}


		/*
		 * Scans root bucket directory for 
		 * files matching pattern
		 */
		stream<rstring objectname> FileInfo = S3ObjectStorageScan() {
			param
 				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				protocol: s3d;		
				directory: $scanDirectoryName;		
				pattern: $outNamePattern;				
		}

		/**
		 * Reads files line by line
		 */
		stream<rstring line> FileData = S3ObjectStorageSource(FileInfo) {
			param
  				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;    			  			  			
		}
		
		
		/**
		 * Prints lines
		 */
		() as opInstanceNameSink = Custom(FileData)  {
		            logic
		            	state: {
		            			mutable int32 linecount = 0;
		            	}
		                onTuple FileData: {
		                    printStringLn((rstring)linecount + ": '" + line + "'");		                    
		                }
		        }
		       
}
