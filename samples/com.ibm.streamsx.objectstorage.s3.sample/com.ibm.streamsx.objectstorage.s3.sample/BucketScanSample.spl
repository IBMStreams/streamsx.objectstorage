namespace com.ibm.streamsx.objectstorage.s3.sample;

use com.ibm.streamsx.objectstorage.s3::*;

public composite BucketScanSample {

	param
		expression<rstring> $accessKeyID : getSubmissionTimeValue("os-access-key-id");
		expression<rstring> $secretAccessKey : getSubmissionTimeValue("os-secret-access-key");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<rstring> $bucket : getSubmissionTimeValue("os-bucket", "streams-sample");
	
		expression<rstring> $scanDirectoryName: getSubmissionTimeValue("scanDirectoryName", "/scanTestData");
		expression<rstring> $outNamePattern: getSubmissionTimeValue("outNamePattern", ".*");
		expression<rstring> $outObjectName: getSubmissionTimeValue("outObjectName", "/scanTestData/output_%OBJECTNUM.txt");

	graph

		stream<rstring line> Data = FileSource() {
			param
				file : getThisToolkitDir()+"/etc/input.txt";
				format: line;
				initDelay: 5.0;
		}
		
		() as osSink = S3ObjectStorageSink(Data) {
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				//protocol: s3d;
				objectName: $outObjectName;
				bytesPerObject: 20l;
  		}

		/*
		 * Scans root bucket directory for 
		 * files matching pattern
		 */
		stream<rstring objectname> FileInfo = S3ObjectStorageScan() {
			param
 				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				//protocol: s3d;		
				directory: $scanDirectoryName;		
				pattern: $outNamePattern;				
		}

		/**
		 * Reads files line by line
		 */
		stream<rstring line> FileData = S3ObjectStorageSource(FileInfo) {
			param
  				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;    			  			  			
		}
		
		
		/**
		 * Prints lines
		 */
		() as ConsoleSink = Custom(FileData) {
			logic
			state: {
				mutable int32 linecount = 0;
			}
			onTuple FileData: {
				printStringLn((rstring)linecount + ": '" + line + "'");
				linecount++;	                    
			}
		}
		       
}
