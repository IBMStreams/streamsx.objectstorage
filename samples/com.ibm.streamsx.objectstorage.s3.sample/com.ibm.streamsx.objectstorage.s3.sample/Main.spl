//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.s3.sample;

use com.ibm.streamsx.objectstorage.s3::*;

/**
 * This sample application shows the usage of the Operator and functions to access Object Storage.
 * A sample bucket is created, the sample file is written to Object Storage, then read from Object Storage.
 * Finally the object and the bucket is deleted.
 */
@threading(model=manual)
composite Main {

	param
		expression<rstring> $accessKeyID : getSubmissionTimeValue("AccessKeyID");
		expression<rstring> $secretAccessKey : getSubmissionTimeValue("SecretAccessKey");
		expression<rstring> $endpoint : getSubmissionTimeValue("Endpoint");

		expression<rstring> $bucket : getSubmissionTimeValue("Bucket", "streams-sample");

	type
		DataType = tuple<rstring objectName, rstring data>;
		SinkOutType = tuple<com.ibm.streamsx.objectstorage.swift::ObjectSink.resultType>;

	graph

		/*
		 * Reads the sample file
		 */
		stream<rstring oneline> Lines = FileSource() {
			param
				file:   getThisToolkitDir()+"/etc/input.txt";
				format: line;
		}
		
		stream<rstring entireDoc> Documents as O = Custom(Lines as I) {
			logic state: {
				mutable rstring soFar = "";
			}
			onTuple I: {
				if (soFar != "") {
					soFar += "\n";
				}
				soFar += I.oneline;
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					submit({entireDoc = soFar}, O);
					soFar =(rstring) "";
					submit(currentPunct(), O);
				}
				else {
					// it's a final punctuation, so send it on.
					submit(currentPunct(), O);
				}
			}
		}

		(stream<DataType> DataString as O) as SampleWriter = Custom(Documents as I) {
			logic
			state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
			}
			onTuple I: {
				mutable boolean res = false;
				printStringLn ("createBucket " + $bucket);
				res = createBucket($bucket);
				if (res) {
					submit ({objectName="sample.csv", data=I.entireDoc}, O);
				}
				else {
					abort();
				}
			}
		}
		
		stream<SinkOutType> ObjStSink = ObjectSink(DataString as I) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				objectNameAttribute: "objectName";
				objectDataAttribute: "data";
		}

		(stream<DataType> FilesToRead as O) as SampleReader = Custom(ObjStSink as I) {
			logic state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
			}
			onTuple I: {
				printStringLn ("list objects: " + I.objectName);
				mutable list<rstring> objects = listObjects($bucket);
				for (rstring name in objects) {
					printStringLn ("object: " + name);
				}
				printStringLn ("read object " + I.objectName);
				submit ({objectName=I.objectName, data=""}, O);
			}
		}		

		stream<I> ObjStSource = ObjectSource(FilesToRead as I) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				objectNameAttribute: "objectName";
				objectDataAttribute: "data";
		}
		
		() as SampleCleanup = Custom(ObjStSource as I) {
			logic
			state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
			}
			onTuple I: {
				printStringLn ((rstring)I); // dump the tuple

				printStringLn ("deleteObject " + I.objectName);
				deleteObject(I.objectName, $bucket);
			}
			onPunct I: {
				if(currentPunct() == Sys.FinalMarker) {
					printStringLn ("FINAL PUNCT");
					printStringLn ("deleteBucket " + $bucket);
					deleteBucket($bucket);
				}
			}
		}
		
	config
		restartable: false;
		placement: partitionColocation("SAMPLE");
}
