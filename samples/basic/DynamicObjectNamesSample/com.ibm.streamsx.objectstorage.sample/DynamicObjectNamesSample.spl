//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.sample;

use com.ibm.streamsx.objectstorage.s3::*;
use com.ibm.streamsx.objectstorage::ObjectStorageSink;
use com.ibm.streamsx.objectstorage::ObjectStorageSinkOut_t;

/**
 * This sample application shows the usage of the Operator and functions to access Object Storage.
 * A bucket is created, a sample file read and written as several small objects to Object Storage, then read from Object Storage.
 * Finally the objects and the bucket is deleted.
 */
@threading(model=manual)
composite DynamicObjectNamesSample {

	param
		expression<rstring> $accessKeyID : getSubmissionTimeValue("os-access-key-id");
		expression<rstring> $secretAccessKey : getSubmissionTimeValue("os-secret-access-key");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<rstring> $bucket : getSubmissionTimeValue("os-bucket", "streams-sample");
		expression<boolean> $cleanup : (boolean)getSubmissionTimeValue("cleanup", "false");
		expression<rstring> $objectName: getSubmissionTimeValue("objectName", "output_%TIME.txt");

	type
		DataType = tuple<rstring objectName, rstring data>;
		S3ObjectStorageSourceIn_t = tuple<rstring objectName>;
		S3ObjectStorageSinkOut_t = tuple<rstring objectName, uint64 size>;

	graph

		/*
		 * Reads the sample file
		 */
		stream<rstring oneline> Lines = FileSource() {
			param
				file:   getThisToolkitDir()+"/etc/input.txt";
				format: line;
		}
		
		stream<S3ObjectStorageSinkOut_t> ObjStSink = S3ObjectStorageSink(Lines as I) {
			logic state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
				mutable boolean res1 = createBucket($bucket);
			} 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				bytesPerObject: 20l;
				timeFormat: "yyyy-MM-dd'T'HHmmss";		
				objectName: $objectName;
		}

		(stream<S3ObjectStorageSourceIn_t> ObjToRead as O) as SampleReader = Custom(ObjStSink as I) {
			logic
			onTuple I: {
				printStringLn("Object with name '" + I.objectName + "' of size '" + (rstring)I.size + "' has been created.");
				printStringLn("read object " + I.objectName);
				submit ({objectName=I.objectName}, O);
			}
		}		

		stream<rstring line> ObjStSource = S3ObjectStorageSource(ObjToRead as I) {
			logic state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
				mutable boolean res1 = createBucket($bucket);
			}
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
		}
		
		() as SampleCleanup = Custom(ObjStSource as I) {
			logic
			state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
			}
			onTuple I: {
				printStringLn ((rstring)I); // dump the tuple
			}
			onPunct I: {
				if(currentPunct() == Sys.FinalMarker) {
					printStringLn ("FINAL PUNCT");
					printStringLn ("list objects");
					mutable list<rstring> objects = listObjects($bucket);
					for (rstring name in objects) {
						printStringLn ("delete object: " + name);
						deleteObject(name, $bucket);
					}
					printStringLn ("deleteBucket " + $bucket);
					deleteBucket($bucket);
				}
			}
		}

}