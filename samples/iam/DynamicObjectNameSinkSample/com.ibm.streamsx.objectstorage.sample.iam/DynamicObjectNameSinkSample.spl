/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.objectstorage.sample.iam;

use com.ibm.streamsx.objectstorage::*;

/**
 * This sample application demonstrates how to use the ObjectStorageSink operator with dynamic object name and close on Window marker
 *
 * Additional purpose of the sample is to demonstrate how to configure the operators and functions with IAM-authentication type.
 *
 * Either set `cos.creds` containing COS credentials JSON in `cos` application configuration or set `IAMApiKey` and `IAMServiceInstanceId` parameters.
 *
 * @param IAMApiKey
 * Parameter to set IAM API Key
 * Ignored if `cos` application configuration contains `cos.creds`.
 * 
 * @param IAMServiceInstanceId
 * Parameter to set IAM service instance ID
 * Ignored if `cos` application configuration contains `cos.creds`.
 * 
 * @param IAMTokenEndpoint
 * Optional parameter to retrieve IAM token, default: https://iam.bluemix.net/oidc/token
 * Ignored if `cos` application configuration contains `cos.creds`.
 * 
 * @param endpoint
 * Optional parameter to set an endpoint to connect to COS, default: s3-api.us-geo.objectstorage.softlayer.net
 *
 * @param objectStorageURI 
 * Set a bucket name and protocol in URI in 'cos://bucket/' or 's3a://bucket/' format
 * 
 */
public composite DynamicObjectNameSinkSample {
	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key", "");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance", "");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");

	graph

		stream<rstring result> SampleRes = DynamicObjectNameSinkSampleIAM() {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;
				endpoint: $endpoint;
		}	
}

/**
 * Used by DynamicObjectNameSinkSample main composite and test application
 *
 * @param IAMApiKey
 * Parameter to set IAM API Key
 * Ignored if `cos` application configuration contains `cos.creds`.
 * 
 * @param IAMServiceInstanceId
 * Parameter to set IAM service instance ID
 * Ignored if `cos` application configuration contains `cos.creds`.
 * 
 * @param IAMTokenEndpoint
 * Optional parameter to retrieve IAM token, default: https://iam.bluemix.net/oidc/token
 * Ignored if `cos` application configuration contains `cos.creds`.
 * 
 * @param endpoint
 * Optional parameter to set an endpoint to connect to COS, default: s3-api.us-geo.objectstorage.softlayer.net
 *
 * @param objectStorageURI 
 * Set a bucket name and protocol in URI in 'cos://bucket/' or 's3a://bucket/' format
 * 
 * @output SampleResult
 * This stream is evaluated by the tester.
 */
public composite DynamicObjectNameSinkSampleIAM (output SampleResult) {
	param
		expression<rstring> $IAMApiKey: "";
		expression<rstring> $IAMServiceInstanceId: "";
		expression<rstring> $IAMTokenEndpoint: "https://iam.bluemix.net/oidc/token";
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint: "s3-api.us-geo.objectstorage.softlayer.net";

	graph
		
		stream<rstring line> Data = FileSource() {
			param
				file : getThisToolkitDir()+"/etc/input.txt";
				format: line;
				initDelay: 5.0;
		}

		(stream<rstring objectName, rstring data> DataWithName;
		stream<rstring result> SampleResult) as KeySetter = Custom(Data as I)  {
			logic
			onTuple I: {
				// object key is set here and object value is forwarded
				submit ({objectName="sample.txt", data=I.line}, DataWithName);
			}
			onPunct I: {
				if(currentPunct() == Sys.FinalMarker) {
					submit ({result="ok"}, SampleResult);
				}
			}
		}
		
		() as OSink = ObjectStorageSink(DataWithName) {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId; 
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;								
				endpoint: $endpoint;								
				objectNameAttribute: objectName;
  		}

}
