/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.objectstorage.sample.iam;

use com.ibm.streamsx.objectstorage::*;

/**
 * The sample demonstrates object creation, scanning and reading.
 * 
 * Additional purpose of the sample is to demonstrate how to configure the operators and functions with IAM-authentication type.
 *
 * Either set `cos.creds` containing COS credentials JSON in `cos` application configuration or set `credentials` parameter.
 *
 * @param credentials;
 * Parameter to set IBM COS service credentials in JSON
 * Overwrites the property `cos.creds` in `cos` application configuration.
 * 
 * @param endpoint
 * Optional parameter to set an endpoint to connect to COS, default: s3.us.cloud-object-storage.appdomain.cloud
 *
 * @param objectStorageURI 
 * Set a bucket name and protocol in URI in 'cos://bucket/' or 's3a://bucket/' format
 * 
 */ 
public composite SinkScanSourceSample {

	param
		expression<rstring> $credentials: getSubmissionTimeValue("os-credentials", "");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3.us.cloud-object-storage.appdomain.cloud");

	graph

		stream<rstring result> SampleRes = SinkScanSourceSampleIAM() {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURI;
				endpoint: $endpoint;
		}	
}

/**
 * Used by SinkScanSourceSample main composite and test application
 *
 * @param credentials;
 * Parameter to set IBM COS service credentials in JSON
 * Overwrites the property `cos.creds` in `cos` application configuration.
 * 
 * @param endpoint
 * Optional parameter to set an endpoint to connect to COS, default: s3.us.cloud-object-storage.appdomain.cloud
 *
 * @param objectStorageURI 
 * Set a bucket name and protocol in URI in 'cos://bucket/' or 's3a://bucket/' format
 * 
 * @output SampleResult
 * This stream is evaluated by the tester.
 */
public composite SinkScanSourceSampleIAM (output SampleResult) {
	param
		expression<rstring> $credentials: "";
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint: "s3.us.cloud-object-storage.appdomain.cloud";
	
	graph
	
		stream<rstring line> Data = Beacon() {
			param
				iterations: 300000;
			output
				Data : line  = "Line " +(rstring) IterationCount();
		}
				
		stream<rstring objectname, uint64 size> ObjectMetaData = ObjectStorageSink(Data) {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURI;
				endpoint : $endpoint;
				objectName : "SAMPLE_%OBJECTNUM.ascii.text";
				bytesPerObject: 1024l;
  		}
		
		() as objectMetadataSink = Custom(ObjectMetaData) {
			logic
			onTuple ObjectMetaData: {
				printStringLn("Object with name '" + objectname + "' of size '" + (rstring)size + "' has been created.");		                    
			}
		}

		stream<rstring objectname> ObjectNames = ObjectStorageScan() {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURI;
				endpoint : $endpoint;
				pattern: "SAMPLE_[0-9]*\\.ascii\\.text$";
				directory: "/";
  		}
		
		stream<rstring data> ObjectData = ObjectStorageSource(ObjectNames) {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURI;
				endpoint : $endpoint;
		}
		
		stream<rstring result> SampleResult = Custom(ObjectData) {
			logic
			onTuple ObjectData: {
				printStringLn("read: "+data);
				submit ({result="ok"}, SampleResult);
			}
		}

}
