/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.objectstorage.sample.iam;

use com.ibm.streamsx.objectstorage::*;

public composite ScanComplexPatternSample {

	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");

	graph
	
		stream<rstring line> Data = Beacon() {
			param
				initDelay : 2.0;
				iterations: 300000;
			output
				Data : line  = "Line " +(rstring) IterationCount();
		}
				
		stream<rstring objectname, uint64 size> ObjectMetaData = ObjectStorageSink(Data) {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId; 
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;
				endpoint : $endpoint;
				objectName : "LDA_100k_%OBJECTNUM.model.pickle";
				bytesPerObject: 1024l * 1024l;
  		}
		
		() as objectMetadataSink = Custom(ObjectMetaData) {
			logic
			onTuple ObjectMetaData: {
				printStringLn("Object with name '" + objectname + "' of size '" + (rstring)size + "' has been created.");		                    
			}
		}

		stream<rstring objectname> ObjectNames = ObjectStorageScan() {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId; 
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;
				endpoint : $endpoint;
				pattern: "LDA_100k_[0-9]*\\.model\\.pickle$";
				directory: "/";
				initDelay: 5.0;
  		}
		
		stream<blob block> ObjectData = ObjectStorageSource(ObjectNames) {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId; 
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;
				endpoint : $endpoint;
				blockSize: 0; // loads file as a single tuple				
		}
		
		() as objectDataSink = Custom(ObjectData) {
			logic
			state: {
				mutable int32 count = 0;
			}
			onTuple ObjectData: {
				count++;
				printStringLn("read objects: "+(rstring)count);
			}
		}

}
