/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.objectstorage.sample.iam;

use com.ibm.streamsx.objectstorage::*;

/**
 * The sample demonstrates object creation with parquet format
 * 
 * Additional purpose of the sample is to demonstrate how to configure the operators and functions with IAM-authentication type.
 *
 * Either set `cos.creds` containing COS credentials JSON in `cos` application configuration or set `credentials` parameter.
 * 
 * @param credentials;
 * Parameter to set IBM COS service credentials in JSON
 * Overwrites the property `cos.creds` in `cos` application configuration.
 * 
 * @param endpoint
 * Optional parameter to set an endpoint to connect to COS, default: s3-api.us-geo.objectstorage.softlayer.net
 *
 * @param objectStorageURI 
 * Set a bucket name and protocol in URI in 'cos://bucket/' or 's3a://bucket/' format
 * 
 * @param objectName
 * Object name used by Sink operator
 *
 * @param timePerObject
 * Time to keep an object name before closing
 */
public composite PartitionedParquetSample {
	param
		expression<rstring> $credentials: getSubmissionTimeValue("os-credentials", "");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<rstring> $objectName: getSubmissionTimeValue("objectName", "testOS%TIME"); 
		expression<float64> $timePerObject: (float64)getSubmissionTimeValue("timePerObject", "20.0");

	graph

		stream<rstring result> SampleRes = PartitionedParquetSampleIAM() {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURI;
				endpoint: $endpoint;
				objectName: $objectName;
				timePerObject: $timePerObject;
		}	
}

/**
 * Used by PartitionedParquetSample main composite and test application
 *
 * @param credentials;
 * Parameter to set IBM COS service credentials in JSON
 * Overwrites the property `cos.creds` in `cos` application configuration.
 * 
 * @param endpoint
 * Optional parameter to set an endpoint to connect to COS, default: s3-api.us-geo.objectstorage.softlayer.net
 *
 * @param objectStorageURI 
 * Set a bucket name and protocol in URI in 'cos://bucket/' or 's3a://bucket/' format
 * 
 * @param objectName
 * Object name used by Sink operator
 *
 * @param timePerObject
 * Time to keep an object name before closing
 *
 * @output SampleResult
 * This stream is evaluated by the tester.
 */
public composite PartitionedParquetSampleIAM (output SampleResult) {
	param
		expression<rstring> $credentials: "";
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint: "s3-api.us-geo.objectstorage.softlayer.net";
	
		expression<rstring> $objectName; 
		expression<float64> $timePerObject;

	type 
		RawNetworkEvent_t = 
			rstring dt_orig,
			rstring computer_id, 
			rstring process_name,                       
			rstring operation, 
			rstring operation_result, 
			rstring source_host, 
			int32 source_port, 
			int32 tcpLength, 
			int64 mms,
			rstring dest_host, 
			int32 dest_port, 
			rstring filename, 
			int64 fileLength; 
	
	graph

		stream<rstring filename> DataFile = Beacon()  {
			param
				period: 0.05; // trigger data upload each 2 seconds 
			output DataFile:
				filename = getThisToolkitDir() + "/etc/partitionSampleData.txt";
		}
		
		/**
		 * Read and Parse raw events
		 */		
		stream<RawNetworkEvent_t> NetworkEvent = FileSource(DataFile) {
			param
				format: csv;
				separator: "|";
		}

		/**
		 * Add partition-specific attributes
		 */
		stream<NetworkEvent, tuple<int32 YEAR, int32 MONTH,  int32 DAY, int32 HOUR>> PartitionedNetworkEvent = Functor(NetworkEvent) {
			logic 
				state: {
					mutable timestamp dt_orig_ts;
				}
				onTuple NetworkEvent: {
					// original format 2014-07-28 12:42:45.618
					dt_orig_ts = toTimestamp(Sys.YYYY_MM_DD_hh_mm_ss_mmm,dt_orig);
				}
			
			output PartitionedNetworkEvent:
				YEAR = (int32)year(dt_orig_ts), 
				MONTH = ((int32)month(dt_orig_ts)) + 1 + (int32) (random() * 50.0), 
				DAY = (int32)day(dt_orig_ts), 
				HOUR = (int32)hour(dt_orig_ts) + (int32) (random() * 50.0);            	
		}
     
		stream<rstring objectname, uint64 size> ObjStSink = ObjectStorageSink(PartitionedNetworkEvent) {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURI;								
				objectName : $objectName;
				endpoint : $endpoint;
				timePerObject: $timePerObject;
				storageFormat: "parquet";
				partitionValueAttributes: "YEAR", "MONTH", "DAY", "HOUR";
		} 

		stream<rstring result> SampleResult = Custom(ObjStSink as I) {
			logic 
			onTuple I: {
				println((rstring)I);
				submit ({result="ok"}, SampleResult);
			}
		}

}
