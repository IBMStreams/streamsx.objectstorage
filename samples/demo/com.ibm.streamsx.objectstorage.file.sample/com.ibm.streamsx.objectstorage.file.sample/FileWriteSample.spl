/*
** Copyright (C) 2018  International Business Machines Corporation
** All Rights Reserved
*/
namespace com.ibm.streamsx.objectstorage.file.sample;

use com.ibm.streamsx.objectstorage::*;
use spl.file::*;

public composite FileWriteSample {

	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");

		expression<rstring> $localFileDir: getSubmissionTimeValue("localFileDir", "/tmp/localResources");
		expression<rstring> $localFileName: getSubmissionTimeValue("localFileName", "outFile.txt");

	graph
        
        () as DataGen = ObjectStorageDataGen() {
        	param
				IAMApiKey: $IAMApiKey; 
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;								
    			endpoint: $endpoint;
        }
         
        stream<blob content> S3Data = ObjectStorageScanner() {
        	param
				IAMApiKey: $IAMApiKey; 
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;								
    			endpoint: $endpoint;
        }

  		() as Sink = FileSink(S3Data) {
            logic state : int32 status = ensureDirs($localFileDir + "/temp");
  		    param
  		        file: $localFileDir + "/temp/" + "{id}";
  		        format: block;
  		        moveFileToDirectory: $localFileDir;
  		        closeMode: count;
  		        tuplesPerFile: 1u;
  		        flush: 1u;
  		}

}

composite ObjectStorageScanner (output ObjectContent) {

    param
		expression<rstring> $objectStorageURI;
		expression<rstring> $IAMApiKey; 
		expression<rstring> $IAMServiceInstanceId;
		expression<rstring> $IAMTokenEndpoint;
		expression<rstring> $endpoint;
		expression<rstring> $pattern: ".*";
		expression<rstring> $directory: "/files";
	

	graph
		stream<rstring objectname> S3Name = ObjectStorageScan() {
			param
				IAMApiKey: $IAMApiKey; 
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;								
    			endpoint: $endpoint;
				pattern: $pattern;
				directory: $directory;
  		}


		stream<blob content> ObjectContent = ObjectStorageSource(S3Name) {
			param
				IAMApiKey: $IAMApiKey; 
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;								
    			endpoint: $endpoint;
    			blockSize: 0; // loads file as a single tuple
  		}

	
}

composite ObjectStorageDataGen {

	param
		expression<rstring> $objectStorageURI;
		expression<rstring> $IAMApiKey; 
		expression<rstring> $IAMServiceInstanceId;
		expression<rstring> $IAMTokenEndpoint;
		expression<rstring> $endpoint;
		expression<rstring> $objectName: "%OBJECTNUM.txt";
		expression<rstring> $directory: "/files/";

	graph

		stream<rstring i> SampleData = Beacon()  {
			param 
				iterations: 500;
				period: 0.1;
			output SampleData: 
				i = (rstring)IterationCount();
			config
				placement: partitionColocation("PrepareData");				
        }
        
        
		() as osSink = ObjectStorageSink(SampleData) {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId; 
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;								
				objectName : $directory + $objectName;
				endpoint : $endpoint;
				bytesPerObject: 200l;
			config
				placement: partitionColocation("PrepareData");				
		}
    
}


stateful int32 ensureDirs(rstring dirpath) {
    appTrc(Trace.warn, "\nCalled: ensureDirs, with " + dirpath);

    list<rstring> steps = tokenize(dirpath, "/", false);
    ensureDirs(steps, 1);

    return 1;
}

stateful void ensureDirs(list<rstring> steps, int32 depth) {
    if (depth > size(steps)) {
        return; // end of recursion
    }
    mutable int32 err = 0;
    uint32 mode = 511u; // octal 0777, all rights
    mutable rstring dir = "/";
    for (int32 i in range(0, depth)) {
        dir += steps[i] + "/";
    }
    mkdir(dir, mode, err);
    appTrc(Trace.info, "\nmkdir " + dir + ", Status: " + (rstring) err);

    ensureDirs(steps, depth + 1);
}
