/**
 * The sample demonstrates object creation 
 * on time basis
 */
namespace com.ibm.streamsx.objectstorage.messagehub.sample;

use com.ibm.streamsx.json::*;
use com.ibm.streamsx.objectstorage::*;

    
public composite MH2ObjectStoragePartitionedParquetSample {
	
	param
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("objectStorageURI");  
		expression<rstring> $objectStorageUser: getSubmissionTimeValue("userID"); 
		expression<rstring> $objectStoragePassword: getSubmissionTimeValue("password");
		expression<rstring> $objectStorageProjectID: getSubmissionTimeValue("projectID");
		expression<rstring> $objectName: getSubmissionTimeValue("objectName", "/prefix/%PARTITION/suffix/testOS%TIME"); 
		expression<float64> $timePerObject: (float64)getSubmissionTimeValue("timePerObject", "90.0");
		expression<rstring> $endpoint: getSubmissionTimeValue("endpoint", "s3.us-south.objectstorage.softlayer.net");
		expression<rstring> $storageFormat: getSubmissionTimeValue("storageFormat", "parquet");
	
	type DataHistorianData_t = 
    	rstring id,
    	rstring tz,
    	rstring dateutc,
    	float64 latitude,
    	float64 longitude,
    	float64 temperature,
    	float64 baromin,
    	float64 humidity,
    	float64 rainin,
    	rstring time_stamp;

    graph
     stream<rstring jsonString> MessageHubData = com.ibm.streamsx.messagehub::MessageHubSource()
     {
         param
             jaasFile : getApplicationDir() + "/etc/jaas_dh_sample.conf";
             brokers : "kafka03-stage1.messagehub.services.us-south.bluemix.net:9093,
                        kafka04-stage1.messagehub.services.us-south.bluemix.net:9093,
                        kafka02-stage1.messagehub.services.us-south.bluemix.net:9093,
                        kafka01-stage1.messagehub.services.us-south.bluemix.net:9093,
                        kafka05-stage1.messagehub.services.us-south.bluemix.net:9093";             
             topic : "dataHistorianSampleData";    
     }
     
     
      stream<DataHistorianData_t> DHEvent = Custom(MessageHubData)
        {
            logic
                onTuple MessageHubData : {
                    mutable JsonParseStatus.status parseStatus = JsonParseStatus.PARSED;
                    mutable uint32 offset = 0u;
                    parseJSON(MessageHubData.jsonString, parseStatus, offset, JsonIndex._1);
                    if (parseStatus == JsonParseStatus.PARSED) {
                        mutable DataHistorianData_t outTuple = {};
                        mutable JsonStatus.status status = JsonStatus.FOUND;
                        
                        outTuple.id = queryJSON("/id", "", status, JsonIndex._1);                       
                        outTuple.tz = queryJSON("/tz", "", status, JsonIndex._1);
                        outTuple.dateutc = queryJSON("/dateutc", "", status, JsonIndex._1);
                        outTuple.latitude = queryJSON("/latitude", 0.0, status, JsonIndex._1);
                        outTuple.longitude = queryJSON("/longitude", 0.0, status, JsonIndex._1);
                        outTuple.temperature = queryJSON("/temperature", 0.0, status, JsonIndex._1);
                        outTuple.baromin = queryJSON("/baromin", 0.0, status, JsonIndex._1);
                        outTuple.humidity = queryJSON("/humidity", 0.0, status, JsonIndex._1);
                        outTuple.rainin = queryJSON("/rainin", 0.0, status, JsonIndex._1);
                        outTuple.time_stamp = queryJSON("/time_stamp", "", status, JsonIndex._1);
                        
                        submit(outTuple, DHEvent);
                    }
                }
        }
        
     	
        stream<DHEvent, tuple<rstring continent, rstring city>> ExtendedDHEvent = Functor(DHEvent) {
               logic
               	state: {
               		mutable list<rstring> parsedTZ;
               	}
               	onTuple DHEvent: {
               		parsedTZ = tokenize(tz,"/",false);
               	}
               output
                   ExtendedDHEvent : continent = parsedTZ[0], city = parsedTZ[1]; 
        }
        
        stream<ExtendedDHEvent> FilteredDHEvent = Filter(ExtendedDHEvent){
                    param 
                        filter: (temperature > 15.0) || (humidity > 35.0 && humidity < 95.0);
                }
     
     
     	stream<rstring objectname, uint64 size> OSSink1 = ObjectStorageSink(FilteredDHEvent) {
         param
                objectStorageURI : $objectStorageURI;
				objectStorageUser : $objectStorageUser;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectName : $objectName;
				endpoint : $endpoint;				
				timePerObject: 60.0;
				//tuplesPerObject: (int64)100;
				//bytesPerObject: 1024l * 1024l;				
				//vmArg: "-Xmx1024M";
				//vmArg: "-Dcom.ibm.tools.attach.enable=yes";
				storageFormat: $storageFormat;	
				//partitionValueAttributes: "continent", "city", "latitude", "humidity"; 										 						
				partitionValueAttributes: "continent", "city";									 						
				parquetCompression: "SNAPPY";
	     	config
	     		placement: partitionIsolation;
	     }
	     
    	 () as OSSinkOut = Custom(OSSink1 as OSSink)  {
                 logic
                     onTuple OSSink: {
                         println(OSSink);                         
                     }
             }
		
}
