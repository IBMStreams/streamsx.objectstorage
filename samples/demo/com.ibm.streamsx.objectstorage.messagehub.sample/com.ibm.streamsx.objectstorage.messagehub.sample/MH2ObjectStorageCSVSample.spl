namespace com.ibm.streamsx.objectstorage.messagehub.sample;

use com.ibm.streamsx.objectstorage::*;


type DataHistorianData_t = 
    	rstring id,
    	rstring tz,
    	rstring dateutc,
    	float64 latitude,
    	float64 longitude,
    	float64 temperature,
    	float64 baromin,
    	float64 humidity,
    	float64 rainin,
    	rstring time_stamp;
    	
public composite MH2ObjectStorageCSVSample {
	
	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
	
		expression<rstring> $objectName: getSubmissionTimeValue("objectName", "testOS_%OBJECTNUM.txt"); 
		expression<float64> $timePerObject: (float64)getSubmissionTimeValue("timePerObject", "90.0");
		expression<rstring> $storageFormat: getSubmissionTimeValue("storageFormat", "csv");
	
	

    graph
     
		stream<rstring content> MessageHubData = com.ibm.streamsx.messagehub::MessageHubConsumer() {
				param
						messageHubCredentialsFile : "etc/messagehub.conf";
						propertiesFile:"etc/consumer.properties";
						outputMessageAttributeName : "content";
						topic : "DataHistorianOSTest";
		}
		         
		stream<blob message> MessageHubDataBlob = Format(MessageHubData) {
            param
                format		 : csv;
            output
                MessageHubDataBlob :
                    message = Output();
        }
     	
     	() as OSSink1 = ObjectStorageSink(MessageHubDataBlob) {
         param
                objectStorageURI: $objectStorageURI;
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectName : $objectName;
				endpoint : $endpoint;
				tuplesPerObject: 1000000l;
				storageFormat: $storageFormat;
	     }
		
}

public composite MHDataProducer {

	graph
	
		stream<DataHistorianData_t> MHData = Beacon()  {
		            param iterations: 1000000;
        }
		
		stream<rstring message> MHMessage = TupleToJSON(MHData) {}
		
		
		() as MHProducer = com.ibm.streamsx.messagehub::MessageHubProducer(MHMessage)
        {
            param
                messageHubCredentialsFile : "etc/messagehub.conf";
                topic : "DataHistorianOSTest";                
        }
		

}

