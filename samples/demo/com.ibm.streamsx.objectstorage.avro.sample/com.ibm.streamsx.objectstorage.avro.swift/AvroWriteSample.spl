namespace com.ibm.streamsx.objectstorage.avro.swift;

use com.ibm.streamsx.objectstorage.swift::SwiftObjectStorageSink;
use com.ibm.streamsx.objectstorage.swift::SwiftObjectStorageSource;
use com.ibm.streamsx.avro::* ;
use com.ibm.streamsx.json::*;

public composite AvroWriteSample {
	
	param
		expression<rstring> $objectStorageUser: getSubmissionTimeValue("os-user");
		expression<rstring> $objectStoragePassword: getSubmissionTimeValue("os-password");
		expression<rstring> $objectStorageProjectID: getSubmissionTimeValue("os-project-id");
		
		expression<rstring> $container: getSubmissionTimeValue("os-container", "swift-test");
		expression<rstring> $objectName: getSubmissionTimeValue("os-objectname", "twitter_%OBJECTNUM.avro");
		expression<rstring> $accessPoint: getSubmissionTimeValue("os-accesspoint", "dal.objectstorage.open.softlayer.com");

	type
		tweetT = rstring username, rstring tweet, uint64 tweettime ;

	graph
		
		/* Generate 100 tweets with a changing value for every tweet */
		stream<tweetT> GenerateTweet = Beacon() {
			param
				iterations : 100u ;
			output
				GenerateTweet : username = "Frank", tweet = "Hi, this is a cool tweet! "
					+(rstring) IterationCount(), tweettime = 1048298232ul + IterationCount() ;
		}

		/* Convert the Tweet tuple to a JSON string */
		stream<rstring jsonMessage> ConvertTupleToJson = TupleToJSON(GenerateTweet) {
		}

		/* Convert the JSON string to an Avro message */
		stream<blob avroMessage> ConvertToAvro = JSONToAvro(ConvertTupleToJson) {
			param
				avroMessageSchemaFile : getThisToolkitDir() + "/etc/twitter.avsc";
		}

		/**
		 * Reads output file name from an input tuple attribute
		 */
		stream<rstring objectName, uint64 size> ObjectData = SwiftObjectStorageSink(ConvertToAvro) {
			param				
				userID: $objectStorageUser;
				password: $objectStoragePassword;
				projectID: $objectStorageProjectID;
				accessPoint: $accessPoint;
				container: $container;
				objectName :  $objectName;
		}
		
		stream<rstring object> Object = Custom(ObjectData) {
			logic
				onTuple ObjectData: {
					printStringLn("Object with name '" + objectName + "' of size '" + (rstring)size + "' has been created.");	
					submit({object = objectName}, Object);	                    
				}
		}

		/**
		 * Reads input file by blocks
		 */
		stream<blob objectdata> AvroData = SwiftObjectStorageSource(Object) {
			param
				userID: $objectStorageUser;
				password: $objectStoragePassword;
				projectID: $objectStorageProjectID;
				accessPoint: $accessPoint;
				container: $container;
		}
						
		/**
		 * Converts blocks to lines
		 */
		stream<rstring line> FormattedData = Parse(AvroData) {
			param
				format : line;		
				parseInput: objectdata;  
		}		
		
		() as GSink = Custom(GenerateTweet as I) {
			logic
			state: {
				mutable int32 msgCount = 0;
			}
			onTuple I: {
					msgCount++;
			}
			onPunct I: {
				if(currentPunct() == Sys.FinalMarker) {
					printStringLn("Number of messages generated is " + (rstring)msgCount);
				}
			}
		}

		() as OutputSink = Custom(FormattedData) {
			logic
			state: {
				mutable int32 msgCount = 0;
			}
			onTuple FormattedData: {
				if (size(regexMatch(line, "^Frank")) > 0) {
					msgCount++;
				}	
			}
			onPunct FormattedData: {
				if(currentPunct() == Sys.FinalMarker) {
					printStringLn("Number of messages loaded from file is " + (rstring)msgCount);
				}
			}
		}
		
}
