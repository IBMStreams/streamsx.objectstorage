namespace com.ibm.streamsx.objectstorage.sample.complex;

use com.ibm.streamsx.objectstorage::*;

public composite LoadPickleSampleIAM {

	param
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("objectStorageURI"); 
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("IAMApiKey");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("IAMServiceInstanceId");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("IAMTokenEndpoint");
		expression<rstring> $endpoint: getSubmissionTimeValue("endpoint");

	graph
	
		stream<rstring objectname> ObjectNames = ObjectStorageScan() {
			param
				objectStorageURI: $objectStorageURI;				
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId; 
				IAMTokenEndpoint: $IAMTokenEndpoint;
				endpoint: $endpoint;
				pattern: "LDA_test_[0-9]*\\.model\\.pickle$";
				directory: "/";	
				initDelay: 5.0;			
  		}
		
		stream<blob block> ObjectData = ObjectStorageSource(ObjectNames) {
			param
				objectStorageURI: $objectStorageURI;				
    			IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId; 
				IAMTokenEndpoint: $IAMTokenEndpoint;
    			endpoint: $endpoint;
    			blockSize: 0; // loads file as a single tuple				
  		}
		
		() as objectDataSink = Custom(ObjectData)  {
		            logic
		            	state: {
		            		mutable int32 count = 0;
		            	}
		            	onTuple ObjectData: {
		            		count++;
		            	}
		                onPunct ObjectData: {
							if (currentPunct() == Sys.WindowMarker) {
		                		printStringLn("File read completed.");
		                	}
		                
		                }
		        }   
		
}
