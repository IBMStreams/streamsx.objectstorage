/**
 * The sample demonstrates object creation 
 * on time basis
 */
namespace com.ibm.streamsx.objectstorage.sample.complex;

use com.ibm.streamsx.json::*;
use com.ibm.streamsx.objectstorage::*;

    
public composite ParquetWithPartitionSample {
	param
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("objectStorageURI");  
		expression<rstring> $objectStorageUser: getSubmissionTimeValue("userID"); 
		expression<rstring> $objectStoragePassword: getSubmissionTimeValue("password");
		expression<rstring> $objectStorageProjectID: getSubmissionTimeValue("projectID");
		expression<rstring> $objectName: getSubmissionTimeValue("objectName", "testOS%TIME"); 
		expression<float64> $timePerObject: (float64)getSubmissionTimeValue("timePerObject", "90.0");
		expression<rstring> $endpoint: getSubmissionTimeValue("endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<rstring> $storageFormat: getSubmissionTimeValue("storageFormat", "raw");

	type 
		RawNetworkEvent_t = 
            rstring dt_orig,
            rstring computer_id, 
            rstring process_name,                       
            rstring operation, 
            rstring operation_result, 
            rstring source_host, 
            int32 source_port, 
            int32 tcpLength, 
            int64 mms,
            rstring dest_host, 
            int32 dest_port, 
            rstring filename, 
            int64 fileLength; 
	
    graph

		stream<rstring filename> DataFile = Beacon()  {
		    param
		    	period: 2.0; // trigger data upload each 2 seconds 
		    output DataFile:
		    	filename = "partitionSampleData.txt";	    	
        }
		
		/**
		 * Read and Parse raw events
		 */		
		stream<RawNetworkEvent_t> NetworkEvent = FileSource(DataFile)
		{
			param
				format: csv;
				separator: "|";
		}

		/**
		 * Add partition-specific attributes
		 */
		stream<NetworkEvent, tuple<int32 YEAR, int32 MONTH,  int32 DAY, int32 HOUR>> PartitionedNetworkEvent = Functor(NetworkEvent) {
			logic 
				state: {
					mutable timestamp dt_orig_ts;
				}
				onTuple NetworkEvent: {
					// original format 2014-07-28 12:42:45.618
					dt_orig_ts = toTimestamp(Sys.YYYY_MM_DD_hh_mm_ss_mmm,dt_orig);
				}
			
			output PartitionedNetworkEvent:
            	YEAR = (int32)year(dt_orig_ts), 
            	MONTH = ((int32)month(dt_orig_ts)) + 1, 
            	DAY = (int32)day(dt_orig_ts), 
             	HOUR = (int32)hour(dt_orig_ts);
	
		}

     
     stream<rstring objectname, uint64 size> OSSink = ObjectStorageSink(PartitionedNetworkEvent)
     {
         param
             objectStorageURI : $objectStorageURI;
				objectStorageUser : $objectStorageUser;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectName : $objectName;
				endpoint : $endpoint;
				tuplesPerObject: 10l;	
				storageFormat: $storageFormat;	
				//partitionValueAttributes: "YEAR", "MONTH", "DAY", "HOUR"; 						
				partitionValueAttributes: "dt_orig"; 						
     } 
     
     () as OSSinkOut = Custom(OSSink)  {
                 logic
                     onTuple OSSink: {
                         println(OSSink);                         
                     }
             }
}
