//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//
namespace com.ibm.streamsx.objectstorage.swift.sample ;

use com.ibm.streamsx.objectstorage.swift::* ;

composite Test(input CfgStream )
{
	param
		expression<rstring> $objectStorageUserID ;
		expression<rstring> $objectStoragePassword ;
		expression<rstring> $objectStorageProjectID ;
		expression<rstring> $objectStorageServiceName ;
		expression<rstring> $objectStorageContainer ;
		expression<rstring> $objectStorageAccessPoint ;
	graph

	/*
		 * Setup bucket and clean-up
		 */
		(stream<I> CfgStream1) as PrepareTest = Custom(CfgStream as I)
		{
			logic
				state :
				{
					mutable boolean res = initialize($objectStorageUserID,
						$objectStoragePassword, $objectStorageProjectID) ; // init Swift client
					mutable boolean isFirstTuple = true ;
				}

				onTuple I :
				{
					if(isFirstTuple)
					{
						isFirstTuple = false ;
						printStringLn("[" +(rstring) getChannel() + "]" + "Setup ...") ;
						createContainer($objectStorageContainer) ;
						deleteAllObjects($objectStorageContainer) ;
					}

					submit(I, CfgStream1) ;
				}

			config
				placement : partitionColocation("TEST") ;
		}

		/*
		 * Data Generator
		 */
		(stream<rstring objectName, rstring data> DataString as O ;
			stream<rstring objectName, rstring data> StartSinkMeasureTrigger as S) as
			DataGen = Custom(CfgStream1 as I)
		{
			logic
				state :
				{
					mutable O otuple = { } ;
					mutable int32 numDataSet = 0 ;
				}

				onTuple I :
				{
					printStringLn("[" +(rstring) getChannel() + "]" +
						"Data generation [files=" +(rstring) I.numFiles + "][bytes=" +(rstring)
						I.numBytes + "]") ;
					for(int32 dataSetCounter in range(I.numBytes))
					{
						otuple.data += "x" ;
						numDataSet = dataSetCounter ;
					}

					printStringLn("[" +(rstring) getChannel() + "]" +
						"Start the WRITE measurement. Timestamp: " +(rstring) getTimestamp()) ;
						// Start the WRITE FILE measurement
					submit(Sys.WindowMarker, S) ; // time measurement start
					for(int32 fileId in range(I.numFiles))
					{
						otuple.objectName =(rstring) fileId ;
						submit(otuple, O) ;
					}

					otuple.data = "" ;
					numDataSet = 0 ;
				}

			config
				placement : partitionColocation("PERFTEST" +(rstring) getChannel()),
					partitionExlocation("TESTAPP") ;
		}

		stream<rstring objectName, uint64 filesize> ObjStSink =
			SwiftObjectStorageSink(DataString)
		{
			param
				userID : $objectStorageUserID ;
				password : $objectStoragePassword ;
				projectID : $objectStorageProjectID ;
				serviceName : $objectStorageServiceName ;
				accessPoint : $objectStorageAccessPoint ;
				objectNameAttribute : objectName ;
				container : $objectStorageContainer ;
			config
				placement : partitionColocation("PERFTEST" +(rstring) getChannel()) ;
		}

		(stream<rstring objectName> FilesToRead as O ; stream<rstring objectName>
			StartSourceMeasureTrigger as T) as MeasureWrite = Custom(ObjStSink as I ;
			StartSinkMeasureTrigger as S)
		{
			logic
				state :
				{
					mutable boolean isStarted = false ;
					mutable timestamp startTimestamp ;
					mutable int32 numFiles = 0 ;
					mutable list<rstring> objectNames ;
				}

				onTuple I :
				{
					insertM(objectNames, I.objectName, numFiles) ;
					numFiles ++ ;
				}

				onPunct S :
				{ // time measurement start
					if(! isStarted)
					{
						isStarted = true ;
						startTimestamp = getTimestamp() ;
					}

				}

				onPunct I :
				{ // time measurement end
					if(currentPunct() == Sys.FinalMarker)
					{
						float64 duration = diffAsSecs(getTimestamp(), startTimestamp) ;
						printStringLn("[" +(rstring) getChannel() + "]" + "[WRITE] duration="
							+(rstring) duration + ".Timestamp " +(rstring) getTimestamp()) ;
						printStringLn("[" +(rstring) getChannel() + "]" + "[WRITE] numFiles="
							+(rstring) numFiles) ;
						printStringLn("[" +(rstring) getChannel() + "]" +
							"Start the READ measurement") ;
							// Start the READ FILE measurement
						submit(Sys.WindowMarker, T) ; // time measurement start
						for(rstring name in objectNames)
						{
							submit({ objectName = name }, O) ;
						}
						// submit(Sys.WindowMarker, O); // time measurement end						

						// reset
						clearM(objectNames) ;
						numFiles = 0 ;
						isStarted = false ;
					}

				}

			config
				placement : partitionColocation("PERFTEST" +(rstring) getChannel()) ;
		}

		stream<rstring data> ObjStSource = SwiftObjectStorageSource(FilesToRead)
		{
			param
				userID : $objectStorageUserID ;
				password : $objectStoragePassword ;
				projectID : $objectStorageProjectID ;
				serviceName : $objectStorageServiceName ;
				accessPoint : $objectStorageAccessPoint ;
				container : $objectStorageContainer ;
			config
				placement : partitionColocation("PERFTEST" +(rstring) getChannel()) ;
		}

		(stream<rstring command> CmdStream) as MeasureRead = Custom(ObjStSource as
			I ; StartSourceMeasureTrigger as S)
		{
			logic
				state :
				{
					mutable boolean isStarted = false ;
					mutable timestamp startTimestamp ;
				}

				onPunct S :
				{ // time measurement start
					if(! isStarted)
					{
						isStarted = true ;
						startTimestamp = getTimestamp() ;
					}

				}

				onPunct I :
				{ // time measurement end
					if(currentPunct() == Sys.FinalMarker)
					{
						float64 duration = diffAsSecs(getTimestamp(), startTimestamp) ;
						printStringLn("[" +(rstring) getChannel() + "]" + "[READ] duration="
							+(rstring) duration) ;
							// reset
						isStarted = false ;
						submit({ command = "end" }, CmdStream) ;
					}

				}

			config
				placement : partitionColocation("PERFTEST" +(rstring) getChannel()) ;
		}

		() as CleanupTest = Custom(CmdStream as I)
		{
			logic
				state :
				{
					mutable boolean res = initialize($objectStorageUserID,
						$objectStoragePassword, $objectStorageProjectID) ; // init Swift client

				}

				onTuple I :
				{
					printStringLn("[" +(rstring) getChannel() + "]" + "Clean-up ...") ;
					deleteAllObjects($objectStorageContainer) ;
				}

				onPunct I :
				{
					if(currentPunct() == Sys.FinalMarker)
					{
						printStringLn("[" +(rstring) getChannel() + "]" + "FINAL PUNCT") ;
						deleteContainer($objectStorageContainer) ;
					}

				}

			config
				placement : partitionColocation("TEST") ;
		}

	config
		restartable : false ;
}
