namespace com.ibm.streamsx.objectstorage.swift.sample;

use com.ibm.streamsx.objectstorage.swift::*;

public composite ContainerScanSample {

	param
		expression<rstring> $objectStorageUser: getSubmissionTimeValue("os-user");
		expression<rstring> $objectStoragePassword: getSubmissionTimeValue("os-password");
		expression<rstring> $objectStorageProjectID: getSubmissionTimeValue("os-project-id");

		expression<rstring> $container: getSubmissionTimeValue("os-container", "swift-test");
		expression<rstring> $accessPoint: getSubmissionTimeValue("os-accesspoint", "dal.objectstorage.open.softlayer.com");
		
	graph

		stream<rstring line> Data as O = Custom() {
			logic
			onProcess: {
				submit({line="This is the first line."}, O);
				submit({line="Second line."}, O);
				submit({line="This is the last line."}, O);
			}
		}
		
		stream<rstring objectName, uint64 size> ObjectMetadata = SwiftObjectStorageSink(Data) {
			param				
				userID: $objectStorageUser;
				password: $objectStoragePassword;
				projectID: $objectStorageProjectID;
				accessPoint: $accessPoint;
				container: $container;
				objectName : "output_%TIME.txt" ;
				closeOnPunct: true;
			config
		         placement:  partitionColocation("SINK");
  		}

		() as Sink1 = Custom(ObjectMetadata) {
			logic
			onTuple ObjectMetadata: {
				printStringLn("Object with name '" + objectName + "' of size '" + (rstring)size + "' has been created.");		                    
			}
		}

		/*
		 * Scans root bucket directory for 
		 * files matching pattern
		 */
		stream<rstring objectName> ObjectInfo = SwiftObjectStorageScan() {
			param
 				userID: $objectStorageUser;
				password: $objectStoragePassword;
				projectID: $objectStorageProjectID;
				accessPoint: $accessPoint;
				container : $container;
				directory: "/";				
				pattern: ".*\\.txt$";				
				initDelay: 5.0;
			config
		        placement:  partitionColocation("SOURCE");
		}

		/**
		 * Reads files line by line
		 */
		stream<rstring line> ObjectData = SwiftObjectStorageSource(ObjectInfo) {
			param				
				userID: $objectStorageUser;
				password: $objectStoragePassword;
				projectID: $objectStorageProjectID;
				accessPoint: $accessPoint;
				container: $container;
			config
		        placement:  partitionColocation("SOURCE");
  		}
		
		/**
		 * Prints lines
		 */
		() as Sink2 = Custom(ObjectData) {
			logic
			state: {
				mutable int32 linecount = 0;
			}
			onTuple ObjectData: {
				printStringLn("[" + (rstring)(linecount++) + "] : '" + line + "'");		                    
			}
		}

}
