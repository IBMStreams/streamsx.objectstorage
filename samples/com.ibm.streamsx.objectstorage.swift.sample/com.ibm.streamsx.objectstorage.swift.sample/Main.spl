//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.swift.sample;

use com.ibm.streamsx.objectstorage.swift::*;

/**
 * This sample application shows the usage of the Operator and functions to access Object Storage.
 * A sample container is created, the sample file is written to Object Storage, then read from Object Storage.
 * Finally the object and the container is deleted.
 */
composite Main {

	param
		expression<rstring> $objectStorageUserID:    getSubmissionTimeValue("ObjectStorage-UserId");
		expression<rstring> $objectStoragePassword:  getSubmissionTimeValue("ObjectStorage-Password");
		expression<rstring> $objectStorageProjectID: getSubmissionTimeValue("ObjectStorage-ProjectId");
		
		expression<rstring> $objectStorageContainer: getSubmissionTimeValue("ObjectStorage-Container", "streams-sample");
		expression<rstring> $objectStorageAccessPoint: getSubmissionTimeValue("ObjectStorage-AccessPoint", "dal.objectstorage.open.softlayer.com");

	type
		DataType = tuple<rstring objectName, rstring data>;
		SinkOutType = tuple<com.ibm.streamsx.objectstorage.swift::ObjectSink.resultType>;

	graph

		/*
		 * Reads the sample file
		 */
		stream<rstring oneline> Lines = FileSource() {
			param
				file:   getThisToolkitDir()+"/etc/input.txt";
				format: line;
		}
		
		stream<rstring entireDoc> Documents as O = Custom(Lines as I) {
			logic state: {
				mutable rstring soFar = "";
			}
			onTuple I: {
				if (soFar != "") {
					soFar += "\n";
				}
				soFar += I.oneline;
			}
			onPunct I: {
				if(currentPunct() == Sys.WindowMarker) {
					submit({entireDoc = soFar}, O);
					soFar =(rstring) "";
					submit(currentPunct(), O);
				}
				else {
					// it's a final punctuation, so send it on.
					submit(currentPunct(), O);
				}
			}
		}

		(stream<DataType> DataString as O) as SampleWriter = Custom(Documents as I) {
			logic state: {
				mutable rstring authKey = "";
				mutable boolean isFirstTuple = true;
			}
			onTuple I: {
				if (isFirstTuple) {
					isFirstTuple = false;
					authKey = authenticate($objectStorageUserID, $objectStoragePassword, $objectStorageProjectID, $objectStorageAccessPoint);
				}
				mutable boolean res = false;
				printStringLn ("createContainer " + $objectStorageContainer);
				res = createContainer($objectStorageContainer, $objectStorageProjectID, $objectStorageAccessPoint, authKey);			
				if (res) {
					submit ({objectName="sample.csv", data=I.entireDoc}, O);
				}
				else {
					abort();
				}
			}
		}
		
		stream<SinkOutType> ObjStSink = ObjectSink(DataString as I) { 
			param
				objectStorageUserID : $objectStorageUserID;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectStorageContainer : $objectStorageContainer;
				objectStorageAccessPoint: $objectStorageAccessPoint;
				objectName: I.objectName;
				objectData: I.data;
				outStreamType: SinkOutType;
		}

		(stream<DataType> FilesToRead as O) as SampleReader = Custom(ObjStSink as I) {
			logic
			onTuple I: {
				submit ({objectName=I.objectName, data=""}, O);
			}
		}		

		stream<I> ObjStSource = ObjectSource(FilesToRead as I) { 
			param
				objectStorageUserID : $objectStorageUserID;
				objectStoragePassword : $objectStoragePassword;
				objectStorageProjectID : $objectStorageProjectID;
				objectStorageContainer : $objectStorageContainer;
				objectStorageAccessPoint: $objectStorageAccessPoint;
				objectName: I.objectName;
				objectData: I.data;
		}
		
		() as SampleCleanup = Custom(ObjStSource as I) {
			logic state: {
				mutable rstring authKey = "";
				mutable boolean isFirstTuple = true;
			}
			onTuple I: {
				printStringLn ((rstring)I); // dump the tuple
				
				if (isFirstTuple) {
					isFirstTuple = false;
					authKey = authenticate($objectStorageUserID, $objectStoragePassword, $objectStorageProjectID, $objectStorageAccessPoint);
				}
				printStringLn ("deleteObject " + I.objectName);
				deleteObject(I.objectName, $objectStorageContainer, $objectStorageProjectID, $objectStorageAccessPoint, authKey);
			}
			onPunct I: {
				if(currentPunct() == Sys.FinalMarker) {
					printStringLn ("FINAL PUNCT");
					printStringLn ("deleteContainer " + $objectStorageContainer);
					deleteContainer($objectStorageContainer, $objectStorageProjectID, $objectStorageAccessPoint, authKey);
				}
			}
		}

	config
		restartable: false;
		placement: partitionColocation("SAMPLE");
}
