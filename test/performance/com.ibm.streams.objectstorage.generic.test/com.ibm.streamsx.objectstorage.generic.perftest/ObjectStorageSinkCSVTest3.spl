namespace com.ibm.streamsx.objectstorage.generic.perftest ;

use com.ibm.streamsx.objectstorage::*;

/**
 *  Object Storage Sink Test
 */
public composite ObjectStorageSinkCSVTest3
{

	param
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("objectStorageURI","s3a://<BUCKET_NAME>/");  
        expression<rstring> $IAMApiKey: getSubmissionTimeValue("IAMApiKey", "");
        expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("IAMServiceInstanceId",  "");
        expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("IAMTokenEndpoint", "https://iam.ng.bluemix.net/oidc/token");

		expression<rstring> $objectName: getSubmissionTimeValue("objectName", "dataHistorian_%TIME.csv"); 
		expression<rstring> $endpoint: getSubmissionTimeValue("endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<float64> $timePerObject: (float64)getSubmissionTimeValue("timePerObject", "60.0");
		expression<int32> $uploadWorkersNum: (int32)getSubmissionTimeValue("uploadWorkersNum", "30");
		
	type DataHistorianData_t = 
    	rstring id,
    	rstring tz,
    	rstring dateutc,
    	float64 latitude,
    	float64 longitude,
    	float64 temperature,
    	float64 baromin,
    	float64 humidity,
    	float64 rainin,
    	rstring time_stamp;
    	
	graph
		stream<DataHistorianData_t> TestData = Beacon()
		{
			output 
				TestData:
					 id = "I53700CO" + (rstring)(random()*100.0),
    				 tz = "Europe/Paris",
    	 			 dateutc = createTimestamp(),
  				     latitude =  random() * 100.0,
                     longitude =  random() * 100.0,
                     temperature =  random() * 50.0,
  					 baromin =  random() * 40.0,
  					 humidity =  random() * 70.0,
  					 rainin =  random() * 20.0,
  					 //time_stamp =  "2018-02-20 03:42:51"		
  					 time_stamp =  createTimestamp();		
		}
		
		/**
		 * Formatting required as for CSV storage format
		 * ObjectStorageSink expects to get formatted blob or rstring
		 */
		stream<blob message> DataBlob = Format(TestData)
		{
			param
				format : csv ;
			output
				DataBlob : message = Output() ;
		}

		() as OSSink1 = ObjectStorageSink(DataBlob)
		{
			param
				objectStorageURI :  $objectStorageURI ;
				IAMApiKey :  $IAMApiKey;
				IAMServiceInstanceId : $IAMServiceInstanceId;
				IAMTokenEndpoint :  $IAMTokenEndpoint;
				objectName : $objectName ;
				endpoint : $endpoint ;
				timePerObject: $timePerObject;
				storageFormat : "raw" ;
				uploadWorkersNum: $uploadWorkersNum;
			config 
				threadedPort: queue(DataBlob, Sys.Wait);
		}

}
