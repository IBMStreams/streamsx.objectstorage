//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.s3.test;

use com.ibm.streamsx.objectstorage::*;
use com.ibm.streamsx.objectstorage.s3::*;

/**
 * This application tests the time to write objects to Object Storage.
 * The test data is created in memory of an operator before starting the time measurement.
 * One tuple send to the ObjectStorageSink represents the object to be created on Object Storage if tuplesPerObject parameter is 1.
 */
public composite WriteDurationTestIAM {

	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key", "");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance", "");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3.us.cloud-object-storage.appdomain.cloud");
		expression<int32>   $numTuples : (int32)getSubmissionTimeValue("numTuples", "10");
		expression<int32>   $tupleSize : (int32)getSubmissionTimeValue("tupleSize", "1000000");
		expression<int32>   $tuplesPerObject: (int32)getSubmissionTimeValue("tuplesPerObject", "1");
		expression<int32>   $uploadWorkersNum: (int32)getSubmissionTimeValue("uploadWorkersNum", "10");

	graph

		stream<rstring result> DurationTest = WriteDurationTestIAMComp() {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;
				endpoint: $endpoint;
				numTuples: $numTuples;
				tupleSize: $tupleSize;
				tuplesPerObject: $tuplesPerObject;
				uploadWorkersNum: $uploadWorkersNum;
		}		

}

@threading(model=manual)
public composite WriteDurationTestIAMComp (output PerfResult)
{
	param
		expression<rstring> $testName: "raw";
		expression<rstring> $testId: "";
		expression<rstring> $IAMApiKey;
		expression<rstring> $IAMServiceInstanceId;
		expression<rstring> $IAMTokenEndpoint: "https://iam.bluemix.net/oidc/token";
		expression<rstring> $objectStorageURI; // "s3a://streams-test-bucket-us.service/"
		expression<rstring> $endpoint : "s3.us.cloud-object-storage.appdomain.cloud";
		expression<int32>   $numTuples : 10;
		expression<int32>   $tupleSize : 1000000;
		expression<int32>   $tuplesPerObject: 1;
		expression<int32>   $uploadWorkersNum: 10;

	graph

		/*
		 * Data Generator
		 */
		(stream<rstring data> DataString as O;
		 stream<rstring dummy> StartTimeStream as S) as DataGen = Custom() {
			logic
			state: {
				mutable int32 numDataSet = 0;
				mutable boolean firstTuple = true;
			}
			onProcess: {
				mutable O otuple = {};
				for (int32 dataSetCounter in range($tupleSize)) {
					otuple.data += "x";
					numDataSet = dataSetCounter;
				}
				submit ({dummy=""}, S); // trigger start time
				for (int32 filenum in range($numTuples)) {
					if (isTraceable(Trace.info)) {
						appTrc(Trace.trace, "submit object "+(rstring)filenum);
					}
					submit (otuple, O); // send data
				}
				// prevent that final punct is sent
				while (true) {
					block(1.0);
				}
			}
			config placement: partitionColocation("PERFTEST");
		}	
		
		stream<rstring objectName, uint64 objectSize> ObjStSink = ObjectStorageSink(DataString) { 
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId; 
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;								
				endpoint : $endpoint;
				objectName: "test_data_%OBJECTNUM";
				tuplesPerObject: (int64)$tuplesPerObject;
				uploadWorkersNum: $uploadWorkersNum;
				//vmArg: "-Xmx 4096m";		
			config placement: partitionColocation("PERFTEST");
		}

		(stream<rstring result> PerfResult) as MeasureWrite = Custom(ObjStSink as I; StartTimeStream as S) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numTuples = 0;
				mutable uint64 numBytes = 0;
			}
			onTuple I: {
				numTuples++;
				numBytes += I.objectSize;
				if (($numTuples/$tuplesPerObject) == numTuples) {
					float64 duration = diffAsSecs(getTimestamp(),startTimestamp);
					float64 kb = (numBytes/1000ul);
					float64 rate = (kb/duration);				
					printStringLn ("{'object_storage_test': '"+$testId+$testName+"_"+getProtocolFromURI($objectStorageURI)+"_w"+(rstring)$uploadWorkersNum+"_tpo"+(rstring)$tuplesPerObject+"_tuplesize"+(rstring)$tupleSize+"_ntuples"+(rstring)$numTuples+"', 'num_objects': "+(rstring)numTuples+", 'num_bytes': "+(rstring)numBytes+", 'data_sent_KB_per_sec': "+(rstring)((int64)rate)+", 'duration_sec': "+(rstring)duration+"}");
					submit ({result="ok"}, PerfResult);
				}
			}
			onTuple S: { // time measurement start
				startTimestamp = getTimestamp();
			}
			config placement: partitionColocation("PERFTEST");
		}
		
	config restartable: false;
}
