//
// ****************************************************************************
// * Copyright (C) 2018, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.s3.test;

use com.ibm.streamsx.objectstorage.s3::*;
use com.ibm.streamsx.objectstorage::*;

/**
 * This application tests to write objects to Object Storage with parquet format in a consistent region.
 */
composite WriteParquet_consistent_region_IAM {

	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key", "");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance", "");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<int32>   $uploadWorkersNum: (int32)getSubmissionTimeValue("uploadWorkersNum", "10");
		expression<int32>   $drainPeriod: (int32)getSubmissionTimeValue("drainPeriod", "10.0");

	graph

		stream<rstring result> CRTest = WriteParquet_consistent_region_IAMComp() {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;
				endpoint: $endpoint;
				uploadWorkersNum: $uploadWorkersNum;
				drainPeriod: $drainPeriod;
		}		

}

@threading(model=manual)
public composite WriteParquet_consistent_region_IAMComp (output DummyResult)
{
	param
		expression<rstring> $IAMApiKey;
		expression<rstring> $IAMServiceInstanceId;
		expression<rstring> $IAMTokenEndpoint: "https://iam.bluemix.net/oidc/token";
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint: "s3-api.us-geo.objectstorage.softlayer.net";
		expression<int32>   $uploadWorkersNum: 10;
		expression<float64> $drainPeriod: 3.0;

	type DataHistorianData_t = 
		rstring id,
		rstring tz,
		rstring dateutc,
		float64 latitude,
		float64 longitude,
		float64 temperature,
		float64 baromin,
		float64 humidity,
		float64 rainin,
		rstring time_stamp;

	graph

		/**
		 * An application with a consistent region requires the
		 * job control plane.
		 */
		() as JCP = JobControlPlane() {}

		@consistent(trigger=periodic, period=$drainPeriod)
		stream<DataHistorianData_t> DataStream = Beacon() {
			output 
				DataStream:
					id = "I53700CO" + (rstring)(random()*100.0),
					tz = "Europe/Paris",
					dateutc = createTimestamp(),
					latitude =  random() * 100.0,
					longitude =  random() * 100.0,
					temperature =  random() * 50.0,
					baromin =  random() * 40.0,
					humidity =  random() * 70.0,
					rainin =  random() * 20.0,
					time_stamp =  createTimestamp();
			config placement: partitionColocation("PERFTEST");
		}

		@parallel(width = 1)
		() as OSink  = ObjectStorageSink(DataStream) { 
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;						
				endpoint : $endpoint;
				objectName: "test_data_"+(rstring)(getChannel())+"_%TIME.snappy.parquet";
				storageFormat: "parquet";
				parquetCompression: "SNAPPY";
				parquetEnableDict : true;     
				uploadWorkersNum: $uploadWorkersNum;      
				vmArg: "-Xmx 4096m";
			config placement: partitionColocation("PERFTEST");
		}
		
		stream<rstring result> DummyResult = Custom() {
			logic
			onProcess: {				
				while (true) {
					submit ({result=""}, DummyResult);
					block(1.0);
				}
			}
		}			
}


stateful rstring createTimestamp() {
	timestamp ts = getTimestamp();
	
	// "2018-02-20 03:42:51"
	return (rstring)year(ts) + "-" + (rstring)month(ts) + "-" + (rstring)day(ts) + " " + (rstring)gmhour(ts) + ":" + (rstring)gmminute(ts) + ":" + (rstring)gmsecond(ts);
}
