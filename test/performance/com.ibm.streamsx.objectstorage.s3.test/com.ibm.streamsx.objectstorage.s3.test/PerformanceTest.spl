//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.s3.test;

use com.ibm.streamsx.objectstorage.s3::*;

/**
 * This application tests the time to write objects to Object Storage
 * and the time to read objects from Object Storage.
 * The test data is created in memory of an operator before starting the time measurement.
 * One tuple send to the S3Sink represents the object to be created on Object Storage.
 * When all objects have been created, then the read performance measurement starts and
 * all objects are read from Object Storage and tuples are discarded.
 * This application creates and deletes the bucket used for this test.
 */
@threading(model=manual)
composite PerformanceTest {

	param
		expression<rstring> $accessKeyID : getSubmissionTimeValue("ObjectStorage-AccessKeyID");
		expression<rstring> $secretAccessKey : getSubmissionTimeValue("ObjectStorage-SecretAccessKey");
				
		expression<rstring> $endpoint : getSubmissionTimeValue("ObjectStorage-Endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<rstring> $bucket : getSubmissionTimeValue("ObjectStorage-Bucket", "streams-test");
		expression<int32> $numChannels: (int32) getSubmissionTimeValue("numChannels", "1");
		expression<boolean> $cleanup : (boolean)getSubmissionTimeValue("cleanup", "false");

	graph

		/*
		 * Read the test configuration file
		 * Specifies number of objects and object size per test sequence
		 */	
		stream<int32 numObjects, int32 numBytes> CfgStream = FileSource() {
			param
				file : getThisToolkitDir()+"/etc/test_config.csv";
				parsing : permissive;
			config placement: partitionColocation("TEST-CONFIG"), partitionExlocation("TESTAPP");
		}
			
		@parallel(width = $numChannels, broadcast=[CfgStream])
		() as Tester = Test(CfgStream) {
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket + (rstring)getChannel();
				cleanup : $cleanup;
		}		


	config restartable: false;
}

composite Test (input CfgStream)
{
	param
		expression<rstring> $accessKeyID;
		expression<rstring> $secretAccessKey;
		expression<rstring> $endpoint;
		expression<rstring> $bucket;
		expression<boolean> $cleanup;

	graph
			
		/*
		 * Setup bucket and clean-up
		 */
		(
		stream<I> CfgStream1
		) as PrepareTest = Custom(CfgStream as I) {
			logic
			state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
				mutable boolean isFirstTuple = true;
			}
			onTuple I: {
				if (isFirstTuple) {
					isFirstTuple = false;
					printStringLn ("["+(rstring)getChannel()+"]"+"Setup ...");
					createBucket($bucket);
					deleteAllObjects($bucket);
				}
				submit (I, CfgStream1);
			}
			config placement: partitionColocation("TEST-CONFIG");
		}

		stream<I> GatedCfgStream = Gate(CfgStream1 as I; Control) {                                                                                 
			param
				maxUnackedTupleCount : 1u; // allow only 1 tuple to go through at a time
			config
				placement: partitionColocation("TEST-CONFIG");
				threadedPort : queue(Control, Sys.Wait);
		}

		/*
		 * Data Generator
		 */
		(
		stream<rstring objectName, rstring data> DataString as O;
		stream<int32 numObjects> NumObjects
		) as DataGen = Custom(GatedCfgStream as I) {
			logic
			state: {
				mutable O otuple = {};				
				mutable int32 numDataSet = 0;
				mutable int32 outRolling = 0;
				mutable boolean firstTuple = true;
				mutable list<O> dataSets = [];
				mutable int32 activeDataSetIdx = 0;
			}
			onTuple I: {
				printStringLn ("["+(rstring)getChannel()+"]"+"["+(rstring)I.numObjects+","+(rstring)I.numBytes+"] --------");
				submit ({numObjects=I.numObjects}, NumObjects); // send cfg tuple

				for (int32 dataSetCounter in range(I.numBytes)) {
					otuple.data += "x";
					numDataSet = dataSetCounter;
				}
				outRolling++;

				for (int32 filenum in range(I.numObjects)) {
					otuple.objectName= "testFile_" + (rstring)outRolling + "_" + (rstring)filenum + ".bin";
					submit (otuple, O); // send data
					submit(Sys.WindowMarker, O); // close
				}
				otuple.data = "";
			}
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel()), partitionExlocation("TESTAPP");
		}	
		
		stream<rstring objectName, uint64 objectSize> ObjStSink = S3ObjectStorageSink(DataString) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				objectNameAttribute: objectName;
				// objectDataAttribute: "data";
				vmArg : "-Xmx6144m";
				genOpenObjPunct: true;
				closeOnPunct: true;				
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel());
		}


		(stream<rstring objectName> ObjNames) as MeasureWrite = Custom(ObjStSink as I; NumObjects as N) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numObjects = 0;
				mutable int32 numObjectsExpected = -1;
				mutable list<rstring> objNames;
			}
			onTuple I: {
				float64 duration = diffAsSecs(getTimestamp(),startTimestamp);
				printStringLn ("["+(rstring)getChannel()+"]"+"[WRITE] "+objectName+" bytes=" + (rstring)objectSize + ", duration="+(rstring)duration);
				isStarted = false;
				insertM(objNames, I.objectName, numObjects);
				numObjects++;
				if (numObjectsExpected == numObjects) {
					for (rstring name in objNames) {
						printStringLn ("["+(rstring)getChannel()+"]"+"[READ] "+name);
						submit ({objectName=name}, ObjNames);
					}
					numObjects = 0;
					numObjectsExpected = -1;
					clearM(objNames);
				}
			}
			onTuple N: {
				numObjectsExpected = N.numObjects;
			}
			onPunct I: { // time measurement start
				if (currentPunct() == Sys.WindowMarker) {
					if (!isStarted) { // start time measurement
						isStarted = true;
						startTimestamp = getTimestamp();
					}
				}
			}
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel());
		}				
		
		
		stream<rstring data> ObjStSource = S3ObjectStorageSource(ObjNames) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				vmArg : "-Xmx6144m";
				genOpenObjPunct: true;
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel());
		}
		
		(stream<boolean dummy> EndStream;
		stream<uint32 count> Control
		) as MeasureRead = Custom(ObjStSource as I; NumObjects as N) {
			logic state: {
				mutable boolean isStarted = false;
				mutable timestamp startTimestamp;
				mutable int32 numObjects = 0;
				mutable int32 numObjectsExpected = -1;
			}
			onTuple I: {
				if (isStarted) { // test nature allows to measure on the first tuple
					float64 duration = diffAsSecs(getTimestamp(),startTimestamp);					
					printStringLn ("["+(rstring)getChannel()+"]"+"[READ] bytes=" + (rstring)length(data) + ", duration="+(rstring)duration);
					numObjects++;
					if (numObjects == numObjectsExpected) {
						submit({count = 1u}, Control); // tell gate to allow another tuple
						numObjects = 0;
						numObjectsExpected = -1;
					}
					// reset
					isStarted = false;	
				}
			}
			onTuple N: {
				numObjectsExpected = N.numObjects;
			}
			onPunct I: { // time measurement start
				if (!isStarted) { // start time measurement
					isStarted = true;
					startTimestamp = getTimestamp();
				}
			}
			config placement: partitionColocation("PERFTEST"+(rstring)getChannel());
		}
		
		() as CleanupTest = Custom(EndStream as I) {
			logic
			state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
			}
			onTuple I: {
			}
			onPunct I: {
				if(currentPunct() == Sys.FinalMarker) {
					printStringLn ("FINAL PUNCT");
					if ($cleanup) {
						printStringLn ("["+(rstring)getChannel()+"]"+"Clean-up ...");
						deleteAllObjects($bucket);

						printStringLn ("deleteBucket " + $bucket);
						deleteBucket($bucket);
					}
				}
			}
			config placement: partitionColocation("TEST-CONFIG");
		}	

		
	
	config restartable: false;
}
