//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.test;

use com.ibm.streamsx.objectstorage.s3::*;
use com.ibm.streamsx.objectstorage::*;

/**
 * This application tests to scan and read objects from Object Storage with various protocols.
 */
composite ReadTestIAM {

	param
		expression<rstring> $credentials: getSubmissionTimeValue("os-credentials", "");
		expression<rstring> $objectStorageURIs3a: getSubmissionTimeValue("os-uri-s3a");
		expression<rstring> $objectStorageURIcos: getSubmissionTimeValue("os-uri-cos");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3.us.cloud-object-storage.appdomain.cloud");

	graph

		stream<rstring result> RTest = ReadTestIAMComp() {
			param
				credentials: $credentials;
				objectStorageURIcos: $objectStorageURIcos;
				objectStorageURIs3a: $objectStorageURIs3a;
				endpoint: $endpoint;
		}		

}

@threading(model=manual)
public composite ReadTestIAMComp (output RResult)
{
	param
		expression<rstring> $credentials: "";
		expression<rstring> $objectStorageURIcos;
		expression<rstring> $objectStorageURIs3a;
		expression<rstring> $endpoint : "s3.us.cloud-object-storage.appdomain.cloud";

	graph

		// S3A - ASCII FILE - reads line by line
		stream<rstring line> TxtDataS3a = ObjectStorageSource() {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURIs3a;								
				endpoint : $endpoint;
				objectName: "input.txt";
		}

		// COS - ASCII FILE - reads line by line
		stream<rstring line> TxtDataCos = ObjectStorageSource() {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURIcos;								
				endpoint : $endpoint;
				objectName: "input.txt";
		}

		(stream<rstring result> RResult) as ResRead = Custom(TxtDataS3a; TxtDataCos) {
			logic
			state: {
				mutable int32 cosTxtLines = 0;
				mutable int32 s3aTxtLines = 0;
			}
			onTuple TxtDataS3a: {
				printStringLn((rstring)s3aTxtLines + "[s3aTxt]: '" + line + "'");
				s3aTxtLines++;
				if (3 == s3aTxtLines) {
					submit ({result="ok"}, RResult);
				}
			}
			onTuple TxtDataCos: {
				printStringLn((rstring)cosTxtLines + "[cosTxt]: '" + line + "'");
				cosTxtLines++;
				if (3 == cosTxtLines) {
					submit ({result="ok"}, RResult);
				}
			}
		}

}

@threading(model=manual)
public composite ReadTestComp (output RResult)
{
	param
		expression<rstring> $accessKeyID;
		expression<rstring> $secretAccessKey;
		expression<rstring> $endpoint : "s3.us.cloud-object-storage.appdomain.cloud";
		expression<rstring> $bucket;

	graph

		// S3A - ASCII FILE - reads line by line
		stream<rstring line> TxtDataS3a = S3ObjectStorageSource() {
			param
  				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey;
				endpoint : $endpoint;
				bucket : $bucket;
				objectName: "input.txt";
				protocol: s3a;
		}

		// COS - ASCII FILE - reads line by line
		stream<rstring line> TxtDataCos = S3ObjectStorageSource() {
			param
  				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey;
				endpoint : $endpoint;
				bucket : $bucket;
				objectName: "input.txt";
				protocol: cos;
		}

		(stream<rstring result> RResult) as ResRead = Custom(TxtDataS3a; TxtDataCos) {
			logic
			state: {
				mutable int32 cosTxtLines = 0;
				mutable int32 s3aTxtLines = 0;

			}
			onTuple TxtDataS3a: {
				printStringLn((rstring)s3aTxtLines + "[s3aTxt]: '" + line + "'");
				s3aTxtLines++;
				if (3 == s3aTxtLines) {
					submit ({result="ok"}, RResult);
				}
			}
			onTuple TxtDataCos: {
				printStringLn((rstring)cosTxtLines + "[cosTxt]: '" + line + "'");
				cosTxtLines++;
				if (3 == cosTxtLines) {
					submit ({result="ok"}, RResult);
				}
			}
		}
}

@threading(model=manual)
public composite ReadBinTestIAMComp (output RResult)
{
	param
		expression<rstring> $credentials: "";
		expression<rstring> $objectStorageURIcos;
		expression<rstring> $objectStorageURIs3a;
		expression<rstring> $endpoint : "s3.us.cloud-object-storage.appdomain.cloud";

	graph

		// S3A - BIN FILE
		stream<blob block> BinDataS3a = ObjectStorageSource() {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURIs3a;								
				endpoint : $endpoint;
				objectName: "input.gz";
				blockSize: 0; // loads file as a single tuple
		}

		// COS - BIN FILE
		stream<blob block> BinDataCos = ObjectStorageSource() {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURIcos;								
				endpoint : $endpoint;
				objectName: "input.gz";
				blockSize: 0; // loads file as a single tuple
		}

		stream<blob b> UnzipBinDataS3a = Decompress (BinDataS3a) {
			param compression : gzip;
		}

		stream<rstring line> ParsedBinDataS3a = Parse (UnzipBinDataS3a) {
			param format : line;
		}

		stream<blob b> UnzipBinDataCos = Decompress (BinDataCos) {
			param compression : gzip;
		}

		stream<rstring line> ParsedBinDataCos = Parse (UnzipBinDataCos) {
			param format : line;
		}

		(stream<rstring result> RResult) as ResRead = Custom(ParsedBinDataS3a; ParsedBinDataCos) {
			logic
			state: {
				mutable int32 cosBin2TxtLines = 0;
				mutable int32 s3aBin2TxtLines = 0;

			}
			onTuple ParsedBinDataS3a: {
				printStringLn((rstring)s3aBin2TxtLines + "[s3aBin]: '" + line + "'");
				s3aBin2TxtLines++;
				if (3 == s3aBin2TxtLines) {
					submit ({result="ok"}, RResult);
				}
			}
			onTuple ParsedBinDataCos: {
				printStringLn((rstring)cosBin2TxtLines + "[cosBin]: '" + line + "'");
				cosBin2TxtLines++;
				if (3 == cosBin2TxtLines) {
					submit ({result="ok"}, RResult);
				}
			}
		}

}

@threading(model=manual)
public composite ReadBinTestComp (output RResult)
{
	param
		expression<rstring> $accessKeyID;
		expression<rstring> $secretAccessKey;
		expression<rstring> $endpoint : "s3.us.cloud-object-storage.appdomain.cloud";
		expression<rstring> $bucket;

	graph

		// S3A - BIN FILE
		stream<blob block> BinDataS3a = S3ObjectStorageSource() {
			param
  				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey;
				endpoint : $endpoint;
				bucket : $bucket;
				objectName: "input.gz";
				protocol: s3a;
				blockSize: 0; // loads file as a single tuple
		}

		// COS - BIN FILE
		stream<blob block> BinDataCos = S3ObjectStorageSource() {
			param
  				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey;
				endpoint : $endpoint;
				bucket : $bucket;
				objectName: "input.gz";
				protocol: cos;
				blockSize: 0; // loads file as a single tuple
		}

		stream<blob b> UnzipBinDataS3a = Decompress (BinDataS3a) {
			param compression : gzip;
		}

		stream<rstring line> ParsedBinDataS3a = Parse (UnzipBinDataS3a) {
			param format : line;
		}

		stream<blob b> UnzipBinDataCos = Decompress (BinDataCos) {
			param compression : gzip;
		}

		stream<rstring line> ParsedBinDataCos = Parse (UnzipBinDataCos) {
			param format : line;
		}

		(stream<rstring result> RResult) as ResRead = Custom(ParsedBinDataS3a; ParsedBinDataCos) {
			logic
			state: {
				mutable int32 cosBin2TxtLines = 0;
				mutable int32 s3aBin2TxtLines = 0;

			}
			onTuple ParsedBinDataS3a: {
				printStringLn((rstring)s3aBin2TxtLines + "[s3aBin]: '" + line + "'");
				s3aBin2TxtLines++;
				if (3 == s3aBin2TxtLines) {
					submit ({result="ok"}, RResult);
				}
			}
			onTuple ParsedBinDataCos: {
				printStringLn((rstring)cosBin2TxtLines + "[cosBin]: '" + line + "'");
				cosBin2TxtLines++;
				if (3 == cosBin2TxtLines) {
					submit ({result="ok"}, RResult);
				}
			}
		}
}
