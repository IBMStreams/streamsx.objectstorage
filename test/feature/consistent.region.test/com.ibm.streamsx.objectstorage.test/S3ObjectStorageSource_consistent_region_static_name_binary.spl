//
// ****************************************************************************
// * Copyright (C) 2018, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.test;

use com.ibm.streamsx.objectstorage.s3::*;

composite S3ObjectStorageSource_consistent_region_static_name_binary {

	param
		expression<rstring> $accessKeyID : getSubmissionTimeValue("os-access-key-id");
		expression<rstring> $secretAccessKey : getSubmissionTimeValue("os-secret-access-key");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");
		expression<rstring> $bucket: getSubmissionTimeValue("os-bucket");

	graph

		stream<rstring result> RTest = ReadTestConsistentRegionPeriodicStaticNameBinaryComp() {
			param
				accessKeyID: $accessKeyID;
				secretAccessKey: $secretAccessKey;
				bucket: $bucket;
				endpoint: $endpoint;
		}
}

@threading(model=manual)
public composite ReadTestConsistentRegionPeriodicStaticNameBinaryComp (output RResult) {
	param
		expression<rstring> $accessKeyID;
		expression<rstring> $secretAccessKey;
		expression<rstring> $endpoint : "s3-api.us-geo.objectstorage.softlayer.net";
		expression<rstring> $bucket;

	graph

		/**
		 * An application with a consistent region requires the
		 * job control plane.
		 */
		() as JCP = JobControlPlane() {}

		// BIN FILE - reads by blocks
		@consistent(trigger=periodic, period=1.0)
		stream<blob block> BinData = S3ObjectStorageSource() {
			param
  				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey;
				endpoint : $endpoint;
				bucket : $bucket;
				objectName: "input.bin";
				blockSize: 1024*1024;
		}

		(stream<rstring result> RResult) as ResRead = Custom(BinData as I) {
			logic
			state: {
				mutable int32 binBlocks = 0;
				mutable int32 binSize = 0;
			}
			onTuple I: {
				binBlocks++;
				binSize += size(I.block);
				printStringLn((rstring)binBlocks + " size: "+(rstring)binSize);
			}
			onPunct I: {
				printStringLn((rstring)currentPunct());
				if (currentPunct() == Sys.WindowMarker) {
					if ((100 == binBlocks) && (binSize == 1024*1024*100)) {
						submit ({result="ok"}, RResult);
					}
				}				
			}
		}

}


@threading(model=manual)
public composite ReadTestConsistentRegionOperatorDrivenStaticNameBinaryComp (output RResult) {
	param
		expression<rstring> $accessKeyID;
		expression<rstring> $secretAccessKey;
		expression<rstring> $endpoint : "s3-api.us-geo.objectstorage.softlayer.net";
		expression<rstring> $bucket;

	graph

		/**
		 * An application with a consistent region requires the
		 * job control plane.
		 */
		() as JCP = JobControlPlane() {}

		// BIN FILE - reads by blocks
		@consistent(trigger=operatorDriven)
		stream<blob block> BinData = S3ObjectStorageSource() {
			param
  				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey;
				endpoint : $endpoint;
				bucket : $bucket;
				objectName: "input.bin";
				blockSize: 1024*1024;
		}

		(stream<rstring result> RResult) as ResRead = Custom(BinData as I) {
			logic
			state: {
				mutable int32 binBlocks = 0;
				mutable int32 binSize = 0;
			}
			onTuple I: {
				binBlocks++;
				binSize += size(I.block);
				printStringLn((rstring)binBlocks + " size: "+(rstring)binSize);
			}
			onPunct I: {
				printStringLn((rstring)currentPunct());
				if (currentPunct() == Sys.WindowMarker) {
					if ((100 == binBlocks) && (binSize == 1024*1024*100)) {
						submit ({result="ok"}, RResult);
					}
				}				
			}
		}

}

