//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.test;

use com.ibm.streamsx.objectstorage.s3::*;
use com.ibm.streamsx.objectstorage::*;

/**
 * This application tests to write objects to Object Storage with various protocols.
 */
composite ObjectStorageSink_consistent_region_parquet {

	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key", "");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance", "");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");

	graph

		stream<rstring result> CRTest = ObjectStorageSink_consistent_region_parquetIAMComp() {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;
				endpoint: $endpoint;
		}		

}

@threading(model=manual)
public composite ObjectStorageSink_consistent_region_parquetIAMComp (output WResult)
{
	param
		expression<rstring> $IAMApiKey;
		expression<rstring> $IAMServiceInstanceId;
		expression<rstring> $IAMTokenEndpoint: "https://iam.bluemix.net/oidc/token";
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint: "s3-api.us-geo.objectstorage.softlayer.net";

	graph

		/**
		 * An application with a consistent region requires the
		 * job control plane.
		 */
		() as JCP = JobControlPlane() {}

		@consistent(trigger=periodic, period=30.0)
		stream<rstring username, uint64 id> DataStream = Beacon() {
			param
				period: 0.1;
			output
				DataStream : username = "Test"+(rstring) IterationCount(), id = IterationCount() ;
		}

		@parallel(width = 1)
		stream<rstring objectName, uint64 objectSize> ObjStSink = ObjectStorageSink(DataStream) { 
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;						
				endpoint : $endpoint;
				objectName: "test_data_"+(rstring)(getChannel())+"_%TIME.snappy.parquet";
				storageFormat: "parquet";
				parquetCompression: "SNAPPY";
		}

		(stream<rstring result> WResult) as ResWrite = Custom(ObjStSink as I) {
			logic 
			onTuple I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onTuple "+(rstring)I);
				}
				submit ({result="ok"}, WResult);
			}
			onPunct I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onPunct "+(rstring)currentPunct());
				}
			}
		}
		
}


