//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.test;

use com.ibm.streamsx.objectstorage.s3::*;
use com.ibm.streamsx.objectstorage::*;

/**
 * This application tests to write objects to Object Storage with various protocols.
 */
composite WriteTestParquetCloseByTimeIAMMain {

	param
		expression<rstring> $IAMApiKey: getSubmissionTimeValue("os-iam-api-key", "");
		expression<rstring> $IAMServiceInstanceId: getSubmissionTimeValue("os-iam-service-instance", "");
		expression<rstring> $IAMTokenEndpoint: getSubmissionTimeValue("os-iam-token-endpoint", "https://iam.bluemix.net/oidc/token");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3-api.us-geo.objectstorage.softlayer.net");

	graph

		stream<rstring result> WTest = WriteTestParquetCloseByTimeIAM() {
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;
				endpoint: $endpoint;
		}		


	config restartable: false;
}

@threading(model=manual)
public composite WriteTestParquetCloseByTimeIAM (output WResult)
{
	param
		expression<rstring> $IAMApiKey;
		expression<rstring> $IAMServiceInstanceId;
		expression<rstring> $IAMTokenEndpoint: "https://iam.bluemix.net/oidc/token";
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint: "s3-api.us-geo.objectstorage.softlayer.net";

		expression<float64> $timePerObject: 30.0;

	graph

		//stream<rstring username, uint64 id, optional<int32> dummy, optional<list<rstring>> optlist> DataStream = Beacon() {
		stream<rstring username, uint64 id> DataGenStream = Beacon() {
			param
				period: 0.1;
			output
				DataGenStream : username = "Test"+(rstring) IterationCount(), id = IterationCount() ;
		}
		
		stream<I> DataStream = Custom(DataGenStream as I; StopTrigger as S) {
			logic
			state: {
				mutable boolean forwardTuple = true;
			}
			onTuple I: {
				if (forwardTuple) { 
					submit (I, DataStream);
				}
			}
			onTuple S: {
				forwardTuple = S.run;
				appTrc(Trace.info, "forwardTuple: " + (rstring) forwardTuple);
			}			
		}		

		@parallel(width = 1)
		stream<rstring objectName, uint64 objectSize> ObjStSink = ObjectStorageSink(DataStream) { 
			param
				IAMApiKey: $IAMApiKey;
				IAMServiceInstanceId: $IAMServiceInstanceId;
				IAMTokenEndpoint: $IAMTokenEndpoint;
				objectStorageURI: $objectStorageURI;						
				endpoint : $endpoint;
				objectName: "test_data_"+(rstring)(getChannel())+"_%TIME.snappy.parquet";
				timePerObject : $timePerObject;
				storageFormat: "parquet";
				parquetCompression: "SNAPPY";
				//closeOnPunct: false;
		}

		(stream<rstring result> WResult) as ResWrite = Custom(ObjStSink as I) {
			logic 
			onTuple I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onTuple "+(rstring)I);
				}
				submit ({result="ok"}, WResult);
			}
			onPunct I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onPunct "+(rstring)currentPunct());
				}
			}
		}
		
		stream<boolean run> StopTrigger = Custom() {
			logic
			onProcess: {
				block(10.0);
				appTrc(Trace.info, "submit StopTrigger");
				submit ({run=false}, StopTrigger);
				block(35.0);
				appTrc(Trace.info, "submit StartTrigger");
				submit ({run=true}, StopTrigger);
				while (true) {
					block(1.0);					
				}
			}
		}		
}


