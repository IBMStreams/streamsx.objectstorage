//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.test;

use com.ibm.streamsx.objectstorage.s3::*;
use com.ibm.streamsx.objectstorage::*;

/**
 * This application tests to write objects to Object Storage with various protocols.
 */
composite WriteTestClosePunctStaticObjectNameFinalPunctIAMMain {

	param
		expression<rstring> $credentials: getSubmissionTimeValue("os-credentials", "");
		expression<rstring> $objectStorageURIs3a: getSubmissionTimeValue("os-uri-s3a");
		expression<rstring> $objectStorageURIcos: getSubmissionTimeValue("os-uri-cos");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3.us.cloud-object-storage.appdomain.cloud");

	graph

		stream<rstring result> WTest = WriteTestClosePunctStaticObjectNameFinalPunctIAM() {
			param
				credentials: $credentials;
				objectStorageURIcos: $objectStorageURIcos;
				objectStorageURIs3a: $objectStorageURIs3a;
				endpoint: $endpoint;
		}		


	config restartable: false;
}

@threading(model=manual)
public composite WriteTestClosePunctStaticObjectNameFinalPunctIAM (output WResult)
{
	param
		expression<rstring> $credentials: "";
		expression<rstring> $objectStorageURIcos;
		expression<rstring> $objectStorageURIs3a;
		expression<rstring> $endpoint : "s3.us.cloud-object-storage.appdomain.cloud";

	graph

		stream<rstring line> Data = FileSource() {
			param
				file : getThisToolkitDir()+"/etc/input.txt";
				format: line;
		}

		// s3a, closeOnPunct		
		stream<rstring objectName, uint64 objectSize> ObjStSink1 = ObjectStorageSink(Data) { 
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURIs3a;								
				endpoint : $endpoint;
				objectName: "test_data_s3a_0";
				closeOnPunct: true;				
		}

		// cos, closeOnPunct
		stream<rstring objectName, uint64 objectSize> ObjStSink2 = ObjectStorageSink(Data) { 
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURIcos;								
				endpoint : $endpoint;
				objectName: "test_data_cos_0";
				closeOnPunct: true;				
		}

		(stream<rstring result> WResult) as ResWrite = Custom(ObjStSink1, ObjStSink2 as I) {
			logic 
			onTuple I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onTuple "+(rstring)I);
				}
				if (objectSize == 0ul) {
					appTrc(Trace.error, "[ResWrite] invalid objectSize :"+(rstring)objectSize);
				}
				else {
					submit ({result="ok"}, WResult);
				}
			}
			onPunct I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onPunct "+(rstring)currentPunct());
				}
			}
		}
		
}

@threading(model=manual)
public composite WriteTestClosePunctStaticObjectNameFinalPunctBasic (output WResult)
{
	param
		expression<rstring> $accessKeyID;
		expression<rstring> $secretAccessKey;
		expression<rstring> $endpoint : "s3.us.cloud-object-storage.appdomain.cloud";
		expression<rstring> $bucket;

	graph

		stream<rstring line> Data = FileSource() {
			param
				file : getThisToolkitDir()+"/etc/input.txt";
				format: line;
		}
		
		// s3a, closeOnPunct
		stream<rstring objectName, uint64 objectSize> ObjStSink1 = S3ObjectStorageSink(Data) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				objectName: "test_data_s3a_0";
				closeOnPunct: true;
				protocol: s3a;
		}

		// cos, closeOnPunct
		stream<rstring objectName, uint64 objectSize> ObjStSink2 = S3ObjectStorageSink(Data) { 
			param
				accessKeyID : $accessKeyID;
				secretAccessKey : $secretAccessKey; 
				endpoint : $endpoint;
				bucket : $bucket;
				objectName: "test_data_cos_0";
				closeOnPunct: true;
				protocol: cos;
		}

		(stream<rstring result> WResult) as ResWrite = Custom(ObjStSink1, ObjStSink2 as I) {
			logic 
			onTuple I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onTuple "+(rstring)I);
				}
				if (objectSize == 0ul) {
					appTrc(Trace.error, "[ResWrite] invalid objectSize :"+(rstring)objectSize);
				}
				else {
					submit ({result="ok"}, WResult);
				}
			}
			onPunct I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onPunct "+(rstring)currentPunct());
				}
			}
		}
}
