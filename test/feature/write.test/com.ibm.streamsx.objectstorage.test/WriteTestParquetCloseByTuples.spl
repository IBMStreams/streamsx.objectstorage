//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.test;

use com.ibm.streamsx.objectstorage.s3::*;
use com.ibm.streamsx.objectstorage::*;

/**
 * This application tests to write objects to Object Storage with various protocols.
 */
composite WriteTestParquetCloseByTuplesIAMMain {

	param
		expression<rstring> $credentials: getSubmissionTimeValue("os-credentials", "");
		expression<rstring> $objectStorageURI: getSubmissionTimeValue("os-uri");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3.us.cloud-object-storage.appdomain.cloud");

	graph

		stream<rstring result> WTest = WriteTestParquetCloseByTuplesIAM() {
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURI;
				endpoint: $endpoint;
		}		


	config restartable: false;
}

@threading(model=manual)
public composite WriteTestParquetCloseByTuplesIAM (output WResult)
{
	param
		expression<rstring> $credentials: "";
		expression<rstring> $objectStorageURI;
		expression<rstring> $endpoint: "s3.us.cloud-object-storage.appdomain.cloud";

		expression<int64> $tuplesPerObject: 5000l;

	graph

		stream<rstring username, uint64 id> DataGenStream = Beacon() {
			param
				iterations: 12000;
			output
				DataGenStream : username = "Test"+(rstring) IterationCount(), id = IterationCount() ;
		}		

		stream<rstring objectName, uint64 objectSize> ObjStSink = ObjectStorageSink(DataGenStream) { 
			param
				credentials: $credentials;
				objectStorageURI: $objectStorageURI;						
				endpoint : $endpoint;
				objectName: "test_data_0_%TIME.snappy.parquet";
				tuplesPerObject : $tuplesPerObject;
				storageFormat: "parquet";
				parquetCompression: "SNAPPY";
		}

		(stream<rstring result> WResult) as ResWrite = Custom(ObjStSink as I) {
			logic 
			onTuple I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onTuple "+(rstring)I);
				}
				submit ({result="ok"}, WResult);
			}
			onPunct I: {
				if (isTraceable(Trace.info)) {
					appTrc(Trace.info, "[ResWrite]onPunct "+(rstring)currentPunct());
				}
			}
		}
				
}


