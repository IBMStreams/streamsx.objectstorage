//
// ****************************************************************************
// * Copyright (C) 2017, International Business Machines Corporation          *
// * All rights reserved.                                                     *
// ****************************************************************************
//

namespace com.ibm.streamsx.objectstorage.test;

use com.ibm.streamsx.objectstorage.s3::*;
use com.ibm.streamsx.objectstorage::*;

/**
 * This application tests to native functions for Object Storage access.
 */
composite FunctionsTest {

	param
		expression<rstring> $accessKeyID : getSubmissionTimeValue("os-access-key-id");
		expression<rstring> $secretAccessKey : getSubmissionTimeValue("os-secret-access-key");
		expression<rstring> $endpoint : getSubmissionTimeValue("os-endpoint", "s3.us.cloud-object-storage.appdomain.cloud");
		expression<rstring> $bucket : getSubmissionTimeValue("os-bucket");

	graph

		stream<rstring result> FuncTest = FunctionsTestComp() {
			param
				accessKeyID: $accessKeyID;
				secretAccessKey: $secretAccessKey;
				bucket: $bucket;
				endpoint: $endpoint;
		}
}


@threading(model=manual)
public composite FunctionsTestComp (output FResult)
{
	param
		expression<rstring> $accessKeyID;
		expression<rstring> $secretAccessKey;
		expression<rstring> $endpoint : "s3.us.cloud-object-storage.appdomain.cloud";
		expression<rstring> $bucket;

	graph

		(stream<rstring result> FResult) as ResFunc = Custom() {
			logic
			state: {
				mutable boolean res = initialize($accessKeyID, $secretAccessKey, $endpoint); // init S3 client
				rstring bucket = $bucket+"-tmp-"+(rstring)PEID();
			}
			onProcess: {
				// ------------------------------------------------------
				// test create / list / delete bucket with temporary bucketname
				mutable boolean resCreate = false;
				mutable boolean resDelete = false;
				mutable boolean bucketFound = false;
				printStringLn ("createBucket " + bucket);
				resCreate = createBucket(bucket);
				printStringLn ("resCreate " + (rstring)resCreate);
				printStringLn ("listBuckets");
				mutable list<rstring> buckets = listBuckets();
				printStringLn ((rstring)buckets);
				for (rstring b in buckets) {
					if (b == bucket) {
						bucketFound = true;
					}
				}
				printStringLn ("deleteBucket " + bucket);
				resDelete = deleteBucket(bucket);
				printStringLn ("resDelete " + (rstring)resDelete);
				if ((bucketFound) && (resDelete) && (resCreate))  {
					submit ({result="ok"}, FResult);
				}

				// ------------------------------------------------------
				// test list / delete objects
				mutable boolean resDelObj = false;
				mutable boolean resDelAllObj = false;
				mutable boolean objFound = false;

				printStringLn ("listObjects in " + $bucket);
				mutable list<rstring> objects = listObjects($bucket);
				printStringLn ((rstring)objects);
				for (rstring key in objects) {
					if (key == "sample1") {
						objFound = true;
					}
				}
				printStringLn ("getObjectMetadata from sample1 in " + $bucket);
				mutable list<rstring> metas = getObjectMetadata($bucket, "sample1");
				printStringLn ((rstring)metas);
				printStringLn ("deleteObject sample1 in " + $bucket);
				resDelObj = deleteObject("sample1", $bucket);
				printStringLn ("deleteAllObjects in " + $bucket);
				resDelAllObj = deleteAllObjects($bucket);
				if ((objFound) && (resDelObj) && (resDelAllObj))  {
					submit ({result="ok"}, FResult);
				}

			}
		}
}
